
AsuroWASD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000844  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000844  000008d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000085  00800072  00800072  000008ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008ea  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000158  00000000  00000000  0000091a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013f5  00000000  00000000  00000a72  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000057d  00000000  00000000  00001e67  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000668  00000000  00000000  000023e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003ac  00000000  00000000  00002a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000445  00000000  00000000  00002df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001259  00000000  00000000  0000323d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  00004496  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__vector_3>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	f8 c1       	rjmp	.+1008   	; 0x408 <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e4       	ldi	r30, 0x44	; 68
  3a:	f8 e0       	ldi	r31, 0x08	; 8
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 37       	cpi	r26, 0x72	; 114
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a2 e7       	ldi	r26, 0x72	; 114
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a7 3f       	cpi	r26, 0xF7	; 247
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	9a d0       	rcall	.+308    	; 0x18e <main>
  5a:	f2 c3       	rjmp	.+2020   	; 0x840 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_3>:
	}
	/* blocking */
	else {
		while (i < length) {
			if (UCSRA & 0x80)
			data[i++] = UDR;
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
		}
		if (time > timeout) data[0] = 'T'; //-----------------------änderung
	}
	/* blocking */
	else {
		while (i < length) {
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
			if (UCSRA & 0x80)
  66:	11 24       	eor	r1, r1
  68:	8f 93       	push	r24
  6a:	80 91 72 00 	lds	r24, 0x0072
			data[i++] = UDR;
		}
	}
}
  6e:	8f 5f       	subi	r24, 0xFF	; 255
  70:	80 93 72 00 	sts	0x0072, r24
/* uses timer2 (36kHz for IR communication */
/* counts falling and rising edge => 36kHz*2 = 72kHz */
ISR (TIMER2_COMP_vect)
{
	count72kHz ++;
}
  74:	8f 91       	pop	r24
  76:	0f 90       	pop	r0
  78:	0f be       	out	0x3f, r0	; 63
  7a:	0f 90       	pop	r0
  7c:	1f 90       	pop	r1
  7e:	18 95       	reti

00000080 <MotorSpeed>:
}

/* Set motor speed */
void MotorSpeed(unsigned char left_speed, unsigned char right_speed)
{
	OCR1A = left_speed;
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	9b bd       	out	0x2b, r25	; 43
  84:	8a bd       	out	0x2a, r24	; 42
	OCR1B = right_speed;
  86:	70 e0       	ldi	r23, 0x00	; 0
  88:	79 bd       	out	0x29, r23	; 41
  8a:	68 bd       	out	0x28, r22	; 40
  8c:	08 95       	ret

0000008e <MotorDir>:
}

/* Set motor direction */
void MotorDir(unsigned char left_dir, unsigned char right_dir)
{
	PORTD = (PORTD &~ ((1 << PD4) | (1 << PD5))) | left_dir;
  8e:	92 b3       	in	r25, 0x12	; 18
  90:	9f 7c       	andi	r25, 0xCF	; 207
  92:	89 2b       	or	r24, r25
  94:	82 bb       	out	0x12, r24	; 18
	PORTB = (PORTB &~ ((1 << PB4) | (1 << PB5))) | right_dir;
  96:	88 b3       	in	r24, 0x18	; 24
  98:	8f 7c       	andi	r24, 0xCF	; 207
  9a:	68 2b       	or	r22, r24
  9c:	68 bb       	out	0x18, r22	; 24
  9e:	08 95       	ret

000000a0 <StatusLED>:
/* Status LED (OFF,GREEN,YELLOW,RED)*/
/* example code set StatusLED GREEN */
/* StatusLED(GREEN); */
void StatusLED(unsigned char color)
{
	if (color == OFF)    {GREEN_LED_OFF; RED_LED_OFF;}
  a0:	81 11       	cpse	r24, r1
  a2:	03 c0       	rjmp	.+6      	; 0xaa <StatusLED+0xa>
  a4:	c0 98       	cbi	0x18, 0	; 24
  a6:	92 98       	cbi	0x12, 2	; 18
  a8:	0a c0       	rjmp	.+20     	; 0xbe <StatusLED+0x1e>
	if (color == GREEN)  {GREEN_LED_ON; RED_LED_OFF;}
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	19 f4       	brne	.+6      	; 0xb4 <StatusLED+0x14>
  ae:	c0 9a       	sbi	0x18, 0	; 24
  b0:	92 98       	cbi	0x12, 2	; 18
  b2:	08 95       	ret
	if (color == YELLOW) {GREEN_LED_ON; RED_LED_ON;}
  b4:	83 30       	cpi	r24, 0x03	; 3
  b6:	19 f4       	brne	.+6      	; 0xbe <StatusLED+0x1e>
  b8:	c0 9a       	sbi	0x18, 0	; 24
  ba:	92 9a       	sbi	0x12, 2	; 18
  bc:	08 95       	ret
	if (color == RED)    {GREEN_LED_OFF; RED_LED_ON;}
  be:	82 30       	cpi	r24, 0x02	; 2
  c0:	11 f4       	brne	.+4      	; 0xc6 <StatusLED+0x26>
  c2:	c0 98       	cbi	0x18, 0	; 24
  c4:	92 9a       	sbi	0x12, 2	; 18
  c6:	08 95       	ret

000000c8 <FrontLED>:
/* Front LED */
/* example code FrontLED ON */
/* FrontLED(ON); */
void FrontLED(unsigned char status)
{
	PORTD = (PORTD &~(1 << PD6)) | (status << PD6);
  c8:	22 b3       	in	r18, 0x12	; 18
  ca:	30 e4       	ldi	r19, 0x40	; 64
  cc:	83 9f       	mul	r24, r19
  ce:	c0 01       	movw	r24, r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 7b       	andi	r18, 0xBF	; 191
  d4:	82 2b       	or	r24, r18
  d6:	82 bb       	out	0x12, r24	; 18
  d8:	08 95       	ret

000000da <BackLED>:
/* function for Break LEDs */
/* example code right LED On left LED Off */
/* BackLED(OFF,ON); */
void BackLED(unsigned char left, unsigned char right)
{
	if (left || right) {
  da:	81 11       	cpse	r24, r1
  dc:	0f c0       	rjmp	.+30     	; 0xfc <BackLED+0x22>
  de:	61 11       	cpse	r22, r1
  e0:	05 c0       	rjmp	.+10     	; 0xec <BackLED+0x12>
		PORTD &= ~(1 << PD7); // Wheel LED OFF
		DDRC |= (1 << PC0) | (1 << PC1); // Output => no odometrie
		PORTC |= (1 << PC0) | (1 << PC1);
	}
	if (!left) PORTC &= ~(1 << PC1);
  e2:	a9 98       	cbi	0x15, 1	; 21
	if (!right) PORTC &= ~(1 << PC0);
  e4:	61 11       	cpse	r22, r1
  e6:	12 c0       	rjmp	.+36     	; 0x10c <BackLED+0x32>
  e8:	a8 98       	cbi	0x15, 0	; 21
  ea:	08 95       	ret
/* example code right LED On left LED Off */
/* BackLED(OFF,ON); */
void BackLED(unsigned char left, unsigned char right)
{
	if (left || right) {
		PORTD &= ~(1 << PD7); // Wheel LED OFF
  ec:	97 98       	cbi	0x12, 7	; 18
		DDRC |= (1 << PC0) | (1 << PC1); // Output => no odometrie
  ee:	84 b3       	in	r24, 0x14	; 20
  f0:	83 60       	ori	r24, 0x03	; 3
  f2:	84 bb       	out	0x14, r24	; 20
		PORTC |= (1 << PC0) | (1 << PC1);
  f4:	85 b3       	in	r24, 0x15	; 21
  f6:	83 60       	ori	r24, 0x03	; 3
  f8:	85 bb       	out	0x15, r24	; 21
  fa:	f3 cf       	rjmp	.-26     	; 0xe2 <BackLED+0x8>
/* example code right LED On left LED Off */
/* BackLED(OFF,ON); */
void BackLED(unsigned char left, unsigned char right)
{
	if (left || right) {
		PORTD &= ~(1 << PD7); // Wheel LED OFF
  fc:	97 98       	cbi	0x12, 7	; 18
		DDRC |= (1 << PC0) | (1 << PC1); // Output => no odometrie
  fe:	84 b3       	in	r24, 0x14	; 20
 100:	83 60       	ori	r24, 0x03	; 3
 102:	84 bb       	out	0x14, r24	; 20
		PORTC |= (1 << PC0) | (1 << PC1);
 104:	85 b3       	in	r24, 0x15	; 21
 106:	83 60       	ori	r24, 0x03	; 3
 108:	85 bb       	out	0x15, r24	; 21
 10a:	ec cf       	rjmp	.-40     	; 0xe4 <BackLED+0xa>
 10c:	08 95       	ret

0000010e <Init>:
/* Init function Processor will be initalized to work correctly */
void Init (void)
{
	//-------- seriell interface programmed in boot routine and already running -------
	//  prepare 36kHz for IR - Communication
	TCCR2 = (1 << WGM21) | (1 << COM20) | (1 << CS20);
 10e:	89 e1       	ldi	r24, 0x19	; 25
 110:	85 bd       	out	0x25, r24	; 37
	OCR2  = 0x6E; // 36kHz @8MHz
 112:	8e e6       	ldi	r24, 0x6E	; 110
 114:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1 << OCIE2); // 36kHz counter for sleep
 116:	89 b7       	in	r24, 0x39	; 57
 118:	80 68       	ori	r24, 0x80	; 128
 11a:	89 bf       	out	0x39, r24	; 57
	//UCSRB = 0x00;
	//UCSRC = 0x86; // No Parity | 1 Stop Bit | 8 Data Bit
	//UBRRL = 0x33; // Baudrate 0x33 9600 //0xCF;-> 2400bps @ 8.00MHz
	
	// I/O Ports
	DDRB = IRTX | LEFT_DIR | PWM | GREEN_LED;
 11c:	8f e3       	ldi	r24, 0x3F	; 63
 11e:	87 bb       	out	0x17, r24	; 23
	DDRD = RIGHT_DIR | FRONT_LED | ODOMETRIE_LED | RED_LED;
 120:	84 ef       	ldi	r24, 0xF4	; 244
 122:	81 bb       	out	0x11, r24	; 17
	
	// for PWM (8-Bit PWM) on OC1A & OC1B
	TCCR1A = (1 << WGM10) | (1 << COM1A1) | (1 << COM1B1);
 124:	81 ea       	ldi	r24, 0xA1	; 161
 126:	8f bd       	out	0x2f, r24	; 47
	// tmr1 running on MCU clock/8
	TCCR1B = (1 << CS11);
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	8e bd       	out	0x2e, r24	; 46
	
	// A/D Conversion
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1); // clk/64
 12c:	86 e8       	ldi	r24, 0x86	; 134
 12e:	86 b9       	out	0x06, r24	; 6
	ODOMETRIE_LED_OFF;
 130:	97 98       	cbi	0x12, 7	; 18

	FrontLED(OFF);
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	c9 df       	rcall	.-110    	; 0xc8 <FrontLED>
	BackLED(ON,ON);
 136:	61 e0       	ldi	r22, 0x01	; 1
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	cf df       	rcall	.-98     	; 0xda <BackLED>
	BackLED(OFF,OFF);
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	cc df       	rcall	.-104    	; 0xda <BackLED>
	StatusLED(GREEN);
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	ad df       	rcall	.-166    	; 0xa0 <StatusLED>
	
	MotorDir(FWD,FWD);
 146:	60 e2       	ldi	r22, 0x20	; 32
 148:	80 e2       	ldi	r24, 0x20	; 32
 14a:	a1 df       	rcall	.-190    	; 0x8e <MotorDir>
}

/* Set motor speed */
void MotorSpeed(unsigned char left_speed, unsigned char right_speed)
{
	OCR1A = left_speed;
 14c:	1b bc       	out	0x2b, r1	; 43
 14e:	1a bc       	out	0x2a, r1	; 42
	OCR1B = right_speed;
 150:	19 bc       	out	0x29, r1	; 41
 152:	18 bc       	out	0x28, r1	; 40
	BackLED(OFF,OFF);
	StatusLED(GREEN);
	
	MotorDir(FWD,FWD);
	MotorSpeed(0,0);
	sei();
 154:	78 94       	sei
 156:	08 95       	ret

00000158 <Sleep>:
}

/* uses 72kHz timer => Sleep(x) = x/72kHz [sec] */
void Sleep(unsigned char time72kHz)
{
	count72kHz = 0;
 158:	10 92 72 00 	sts	0x0072, r1
	while (count72kHz < time72kHz);
 15c:	90 91 72 00 	lds	r25, 0x0072
 160:	98 17       	cp	r25, r24
 162:	e0 f3       	brcs	.-8      	; 0x15c <Sleep+0x4>
}
 164:	08 95       	ret

00000166 <SleepMS>:

void SleepMS (double i)
{
	i *= 72000 ;
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	30 ea       	ldi	r19, 0xA0	; 160
 16a:	4c e8       	ldi	r20, 0x8C	; 140
 16c:	57 e4       	ldi	r21, 0x47	; 71
 16e:	75 d2       	rcall	.+1258   	; 0x65a <__mulsf3>
	Sleep(i);
 170:	f7 d1       	rcall	.+1006   	; 0x560 <__fixunssfsi>
 172:	86 2f       	mov	r24, r22
 174:	f1 df       	rcall	.-30     	; 0x158 <Sleep>
 176:	08 95       	ret

00000178 <setMotor>:
}//-------------------------------------------------Ende main



void setMotor(char DirLeft, char DirRight, char SpeedLeft, char SpeedRight)
{
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	c4 2f       	mov	r28, r20
 17e:	d2 2f       	mov	r29, r18
	MotorDir(DirLeft,DirRight);
 180:	86 df       	rcall	.-244    	; 0x8e <MotorDir>
	MotorSpeed(SpeedLeft, SpeedRight);
 182:	6d 2f       	mov	r22, r29
 184:	8c 2f       	mov	r24, r28
 186:	7c df       	rcall	.-264    	; 0x80 <MotorSpeed>
	
	return;  
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <main>:
void setMotor(char DirLeft, char DirRight, char SpeedLeft, char SpeedRight); 



int main(void)
{
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
 196:	2f 97       	sbiw	r28, 0x0f	; 15
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	f8 94       	cli
 19c:	de bf       	out	0x3e, r29	; 62
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	cd bf       	out	0x3d, r28	; 61
	Init(); 
 1a2:	b5 df       	rcall	.-150    	; 0x10e <Init>
	char ReadData[15];
	char SpeedLeft = 200;
	char SpeedRight = 200;
	char DirRight = FREE; 
	char DirLeft = FREE; 
	usart_init_intr(9600);
 1a4:	80 e8       	ldi	r24, 0x80	; 128
 1a6:	95 e2       	ldi	r25, 0x25	; 37
 1a8:	02 d1       	rcall	.+516    	; 0x3ae <usart_init_intr>
	uint32_t handshake = 0; 
	uint32_t counter = 0; 
 1aa:	c1 2c       	mov	r12, r1
 1ac:	d1 2c       	mov	r13, r1
 1ae:	76 01       	movw	r14, r12
	char SpeedLeft = 200;
	char SpeedRight = 200;
	char DirRight = FREE; 
	char DirLeft = FREE; 
	usart_init_intr(9600);
	uint32_t handshake = 0; 
 1b0:	81 2c       	mov	r8, r1
 1b2:	91 2c       	mov	r9, r1
 1b4:	54 01       	movw	r10, r8
	Init(); 
	char ReadData[15];
	char SpeedLeft = 200;
	char SpeedRight = 200;
	char DirRight = FREE; 
	char DirLeft = FREE; 
 1b6:	0f 2e       	mov	r0, r31
 1b8:	f0 e3       	ldi	r31, 0x30	; 48
 1ba:	4f 2e       	mov	r4, r31
 1bc:	f0 2d       	mov	r31, r0
{
	Init(); 
	char ReadData[15];
	char SpeedLeft = 200;
	char SpeedRight = 200;
	char DirRight = FREE; 
 1be:	0f 2e       	mov	r0, r31
 1c0:	f0 e3       	ldi	r31, 0x30	; 48
 1c2:	5f 2e       	mov	r5, r31
 1c4:	f0 2d       	mov	r31, r0
int main(void)
{
	Init(); 
	char ReadData[15];
	char SpeedLeft = 200;
	char SpeedRight = 200;
 1c6:	0f 2e       	mov	r0, r31
 1c8:	f8 ec       	ldi	r31, 0xC8	; 200
 1ca:	6f 2e       	mov	r6, r31
 1cc:	f0 2d       	mov	r31, r0

int main(void)
{
	Init(); 
	char ReadData[15];
	char SpeedLeft = 200;
 1ce:	0f 2e       	mov	r0, r31
 1d0:	f8 ec       	ldi	r31, 0xC8	; 200
 1d2:	7f 2e       	mov	r7, r31
 1d4:	f0 2d       	mov	r31, r0
		{
			counter++;
		}
		else
		{
			counter=0; 
 1d6:	21 2c       	mov	r2, r1
 1d8:	31 2c       	mov	r3, r1
	
	
    while(1)
    {
//-----------------------------------------------------------------Einlesen
		if (usart_byte_avail_intr() == 1)
 1da:	44 d1       	rcall	.+648    	; 0x464 <usart_byte_avail_intr>
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	19 f5       	brne	.+70     	; 0x226 <main+0x98>
		{
			ReadData[0] = (unsigned char)usart_getc_intr();
 1e0:	54 d1       	rcall	.+680    	; 0x48a <usart_getc_intr>
 1e2:	89 83       	std	Y+1, r24	; 0x01
			//usart_putc(ReadData[0]); 
			if ((ReadData[0] == 'G') /*&& (usart_string_avail_intr() == 1)*/)
 1e4:	87 34       	cpi	r24, 0x47	; 71
 1e6:	f9 f4       	brne	.+62     	; 0x226 <main+0x98>
			{
				StatusLED(OFF); 
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	5a df       	rcall	.-332    	; 0xa0 <StatusLED>
				usart_puts(" IF_G ");
 1ec:	80 e6       	ldi	r24, 0x60	; 96
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	6e d1       	rcall	.+732    	; 0x4ce <usart_puts>
				usart_putc(ReadData[0]);
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	68 d1       	rcall	.+720    	; 0x4c6 <usart_putc>
				i=1; 
				while (ReadData[i] != 'E' && usart_byte_avail_intr() == 1)
 1f6:	8a 81       	ldd	r24, Y+2	; 0x02
 1f8:	85 34       	cpi	r24, 0x45	; 69
 1fa:	99 f0       	breq	.+38     	; 0x222 <main+0x94>
 1fc:	8e 01       	movw	r16, r28
 1fe:	0e 5f       	subi	r16, 0xFE	; 254
 200:	1f 4f       	sbci	r17, 0xFF	; 255
 202:	0c c0       	rjmp	.+24     	; 0x21c <main+0x8e>
				{
					ReadData[i]=usart_getc_intr();
 204:	42 d1       	rcall	.+644    	; 0x48a <usart_getc_intr>
 206:	f8 01       	movw	r30, r16
 208:	81 93       	st	Z+, r24
 20a:	8f 01       	movw	r16, r30
					//usart_putc(ReadData[i]);  
					i++;
					StatusLED(GREEN); 
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	48 df       	rcall	.-368    	; 0xa0 <StatusLED>
					usart_putc('M'); 
 210:	8d e4       	ldi	r24, 0x4D	; 77
 212:	59 d1       	rcall	.+690    	; 0x4c6 <usart_putc>
			{
				StatusLED(OFF); 
				usart_puts(" IF_G ");
				usart_putc(ReadData[0]);
				i=1; 
				while (ReadData[i] != 'E' && usart_byte_avail_intr() == 1)
 214:	f8 01       	movw	r30, r16
 216:	80 81       	ld	r24, Z
 218:	85 34       	cpi	r24, 0x45	; 69
 21a:	19 f0       	breq	.+6      	; 0x222 <main+0x94>
 21c:	23 d1       	rcall	.+582    	; 0x464 <usart_byte_avail_intr>
 21e:	81 30       	cpi	r24, 0x01	; 1
 220:	89 f3       	breq	.-30     	; 0x204 <main+0x76>
					i++;
					StatusLED(GREEN); 
					usart_putc('M'); 
				}
				
				usart_putc('N'); 
 222:	8e e4       	ldi	r24, 0x4E	; 78
 224:	50 d1       	rcall	.+672    	; 0x4c6 <usart_putc>
			}
			//usart_puts("Asuro: " + ReadData[0]);
		}
//-----------------------------------------------------------------WASD Steuerung
//-----------------------------------------------vorwärts
		if(ReadData[0] == 'W')
 226:	89 81       	ldd	r24, Y+1	; 0x01
 228:	87 35       	cpi	r24, 0x57	; 87
 22a:	61 f4       	brne	.+24     	; 0x244 <main+0xb6>
		{
			DirLeft = FWD;
			DirRight = FWD;
			BackLED(ON,ON);
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	54 df       	rcall	.-344    	; 0xda <BackLED>
			FrontLED(OFF);	
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	49 df       	rcall	.-366    	; 0xc8 <FrontLED>
		}
//-----------------------------------------------------------------WASD Steuerung
//-----------------------------------------------vorwärts
		if(ReadData[0] == 'W')
		{
			DirLeft = FWD;
 236:	68 94       	set
 238:	44 24       	eor	r4, r4
 23a:	45 f8       	bld	r4, 5
			DirRight = FWD;
 23c:	68 94       	set
 23e:	55 24       	eor	r5, r5
 240:	55 f8       	bld	r5, 5
 242:	7f c0       	rjmp	.+254    	; 0x342 <main+0x1b4>
			BackLED(ON,ON);
			FrontLED(OFF);	
			//usart_putc(ReadData[0]); 			 	
		}
//----------------------------------------------rückwärts
		else if (ReadData[0] == 'S')
 244:	83 35       	cpi	r24, 0x53	; 83
 246:	61 f4       	brne	.+24     	; 0x260 <main+0xd2>
		{
			DirLeft = RWD;
			DirRight = RWD;
			BackLED(ON, ON);
 248:	61 e0       	ldi	r22, 0x01	; 1
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	46 df       	rcall	.-372    	; 0xda <BackLED>
			FrontLED(ON);
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	3b df       	rcall	.-394    	; 0xc8 <FrontLED>
			//usart_putc(ReadData[0]); 			 	
		}
//----------------------------------------------rückwärts
		else if (ReadData[0] == 'S')
		{
			DirLeft = RWD;
 252:	68 94       	set
 254:	44 24       	eor	r4, r4
 256:	44 f8       	bld	r4, 4
			DirRight = RWD;
 258:	68 94       	set
 25a:	55 24       	eor	r5, r5
 25c:	54 f8       	bld	r5, 4
 25e:	71 c0       	rjmp	.+226    	; 0x342 <main+0x1b4>
			BackLED(ON, ON);
			FrontLED(ON);
			//usart_putc(ReadData[0]);
		}
//-----------------------------------------------links
		else if (ReadData[0] == 'A')
 260:	81 34       	cpi	r24, 0x41	; 65
 262:	a1 f4       	brne	.+40     	; 0x28c <main+0xfe>
		{
			DirLeft = FREE;
			DirRight = FWD;
			BackLED(ON,OFF);
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	38 df       	rcall	.-400    	; 0xda <BackLED>
			FrontLED(OFF);
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	2d df       	rcall	.-422    	; 0xc8 <FrontLED>
						usart_putc('L');
 26e:	8c e4       	ldi	r24, 0x4C	; 76
 270:	2a d1       	rcall	.+596    	; 0x4c6 <usart_putc>
						usart_puti((int) SpeedLeft, 3);
 272:	63 e0       	ldi	r22, 0x03	; 3
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	87 2d       	mov	r24, r7
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	37 d1       	rcall	.+622    	; 0x4ea <usart_puti>
			//usart_putc(ReadData[0]);
		}
//-----------------------------------------------links
		else if (ReadData[0] == 'A')
		{
			DirLeft = FREE;
 27c:	0f 2e       	mov	r0, r31
 27e:	f0 e3       	ldi	r31, 0x30	; 48
 280:	4f 2e       	mov	r4, r31
 282:	f0 2d       	mov	r31, r0
			DirRight = FWD;
 284:	68 94       	set
 286:	55 24       	eor	r5, r5
 288:	55 f8       	bld	r5, 5
 28a:	5b c0       	rjmp	.+182    	; 0x342 <main+0x1b4>
						usart_putc('L');
						usart_puti((int) SpeedLeft, 3);
			//usart_putc(ReadData[0]);
		}
//-----------------------------------------------rechts
		else if (ReadData[0] == 'D')
 28c:	84 34       	cpi	r24, 0x44	; 68
 28e:	a1 f4       	brne	.+40     	; 0x2b8 <main+0x12a>
		{
			DirLeft = FWD;
			DirRight = FREE;
			BackLED(OFF, ON);
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	22 df       	rcall	.-444    	; 0xda <BackLED>
			FrontLED(OFF);
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	17 df       	rcall	.-466    	; 0xc8 <FrontLED>
			usart_putc('R');
 29a:	82 e5       	ldi	r24, 0x52	; 82
 29c:	14 d1       	rcall	.+552    	; 0x4c6 <usart_putc>
			usart_puti((int) SpeedRight, 3);
 29e:	63 e0       	ldi	r22, 0x03	; 3
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	86 2d       	mov	r24, r6
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	21 d1       	rcall	.+578    	; 0x4ea <usart_puti>
			//usart_putc(ReadData[0]);
		}
//-----------------------------------------------rechts
		else if (ReadData[0] == 'D')
		{
			DirLeft = FWD;
 2a8:	68 94       	set
 2aa:	44 24       	eor	r4, r4
 2ac:	45 f8       	bld	r4, 5
			DirRight = FREE;
 2ae:	0f 2e       	mov	r0, r31
 2b0:	f0 e3       	ldi	r31, 0x30	; 48
 2b2:	5f 2e       	mov	r5, r31
 2b4:	f0 2d       	mov	r31, r0
 2b6:	45 c0       	rjmp	.+138    	; 0x342 <main+0x1b4>
			usart_putc('R');
			usart_puti((int) SpeedRight, 3);
			//usart_putc(ReadData[0]);
		}
//-----------------------------------------------Speed
		else if (ReadData[0] == 'G')
 2b8:	87 34       	cpi	r24, 0x47	; 71
 2ba:	61 f5       	brne	.+88     	; 0x314 <main+0x186>
		{
			SpeedLeft  = (char) atol(ReadData +1);
 2bc:	ce 01       	movw	r24, r28
 2be:	02 96       	adiw	r24, 0x02	; 2
 2c0:	51 d2       	rcall	.+1186   	; 0x764 <atol>
 2c2:	76 2e       	mov	r7, r22
			i=1; 
			while (ReadData[i] != 'Z')
 2c4:	8a 81       	ldd	r24, Y+2	; 0x02
 2c6:	8a 35       	cpi	r24, 0x5A	; 90
 2c8:	49 f0       	breq	.+18     	; 0x2dc <main+0x14e>
 2ca:	fe 01       	movw	r30, r28
 2cc:	33 96       	adiw	r30, 0x03	; 3
		}
//-----------------------------------------------Speed
		else if (ReadData[0] == 'G')
		{
			SpeedLeft  = (char) atol(ReadData +1);
			i=1; 
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
			while (ReadData[i] != 'Z')
			{
				i++; 
 2d2:	01 96       	adiw	r24, 0x01	; 1
//-----------------------------------------------Speed
		else if (ReadData[0] == 'G')
		{
			SpeedLeft  = (char) atol(ReadData +1);
			i=1; 
			while (ReadData[i] != 'Z')
 2d4:	21 91       	ld	r18, Z+
 2d6:	2a 35       	cpi	r18, 0x5A	; 90
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <main+0x144>
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <main+0x152>
		}
//-----------------------------------------------Speed
		else if (ReadData[0] == 'G')
		{
			SpeedLeft  = (char) atol(ReadData +1);
			i=1; 
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
			while (ReadData[i] != 'Z')
			{
				i++; 
			}
			
			SpeedRight = (char) atol(ReadData +i+1); 			
 2e0:	01 96       	adiw	r24, 0x01	; 1
 2e2:	21 e0       	ldi	r18, 0x01	; 1
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	2c 0f       	add	r18, r28
 2e8:	3d 1f       	adc	r19, r29
 2ea:	82 0f       	add	r24, r18
 2ec:	93 1f       	adc	r25, r19
 2ee:	3a d2       	rcall	.+1140   	; 0x764 <atol>
 2f0:	66 2e       	mov	r6, r22
			
			usart_putc(ReadData[0]); 
 2f2:	87 e4       	ldi	r24, 0x47	; 71
 2f4:	e8 d0       	rcall	.+464    	; 0x4c6 <usart_putc>
			usart_putc('L'); 
 2f6:	8c e4       	ldi	r24, 0x4C	; 76
 2f8:	e6 d0       	rcall	.+460    	; 0x4c6 <usart_putc>
			usart_puti((int) SpeedLeft, 3);
 2fa:	63 e0       	ldi	r22, 0x03	; 3
 2fc:	70 e0       	ldi	r23, 0x00	; 0
 2fe:	87 2d       	mov	r24, r7
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	f3 d0       	rcall	.+486    	; 0x4ea <usart_puti>
			usart_putc('R');
 304:	82 e5       	ldi	r24, 0x52	; 82
 306:	df d0       	rcall	.+446    	; 0x4c6 <usart_putc>
			usart_puti((int) SpeedRight, 3);
 308:	63 e0       	ldi	r22, 0x03	; 3
 30a:	70 e0       	ldi	r23, 0x00	; 0
 30c:	86 2d       	mov	r24, r6
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	ec d0       	rcall	.+472    	; 0x4ea <usart_puti>
 312:	17 c0       	rjmp	.+46     	; 0x342 <main+0x1b4>

		}
//------------------------------------------------keine Zeichen empfangen
		else if (ReadData[0] == 'X')
 314:	88 35       	cpi	r24, 0x58	; 88
 316:	71 f4       	brne	.+28     	; 0x334 <main+0x1a6>
		{
			DirLeft = FREE;
			DirRight = FREE;
			FrontLED(OFF);
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	d6 de       	rcall	.-596    	; 0xc8 <FrontLED>
			BackLED(OFF, OFF);
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	dc de       	rcall	.-584    	; 0xda <BackLED>

		}
//------------------------------------------------keine Zeichen empfangen
		else if (ReadData[0] == 'X')
		{
			DirLeft = FREE;
 322:	0f 2e       	mov	r0, r31
 324:	f0 e3       	ldi	r31, 0x30	; 48
 326:	4f 2e       	mov	r4, r31
 328:	f0 2d       	mov	r31, r0
			DirRight = FREE;
 32a:	0f 2e       	mov	r0, r31
 32c:	f0 e3       	ldi	r31, 0x30	; 48
 32e:	5f 2e       	mov	r5, r31
 330:	f0 2d       	mov	r31, r0
 332:	07 c0       	rjmp	.+14     	; 0x342 <main+0x1b4>
			FrontLED(OFF);
			BackLED(OFF, OFF);
			//StatusLED(YELLOW);
		}
//-----------------------------------------------Handshake
		else if (ReadData[0] == 'h')
 334:	88 36       	cpi	r24, 0x68	; 104
 336:	29 f4       	brne	.+10     	; 0x342 <main+0x1b4>
		{
			handshake = 1; 				
 338:	88 24       	eor	r8, r8
 33a:	83 94       	inc	r8
 33c:	91 2c       	mov	r9, r1
 33e:	a1 2c       	mov	r10, r1
 340:	b1 2c       	mov	r11, r1
		}
		
		if (counter < 100000)
 342:	30 ea       	ldi	r19, 0xA0	; 160
 344:	c3 16       	cp	r12, r19
 346:	36 e8       	ldi	r19, 0x86	; 134
 348:	d3 06       	cpc	r13, r19
 34a:	31 e0       	ldi	r19, 0x01	; 1
 34c:	e3 06       	cpc	r14, r19
 34e:	f1 04       	cpc	r15, r1
 350:	30 f4       	brcc	.+12     	; 0x35e <main+0x1d0>
		{
			counter++;
 352:	8f ef       	ldi	r24, 0xFF	; 255
 354:	c8 1a       	sub	r12, r24
 356:	d8 0a       	sbc	r13, r24
 358:	e8 0a       	sbc	r14, r24
 35a:	f8 0a       	sbc	r15, r24
 35c:	06 c0       	rjmp	.+12     	; 0x36a <main+0x1dc>
		}
		else
		{
			counter=0; 
			ReadData[0] = 'X';
 35e:	e8 e5       	ldi	r30, 0x58	; 88
 360:	e9 83       	std	Y+1, r30	; 0x01
		{
			counter++;
		}
		else
		{
			counter=0; 
 362:	c2 2c       	mov	r12, r2
 364:	d3 2c       	mov	r13, r3
 366:	e1 2c       	mov	r14, r1
 368:	f1 2c       	mov	r15, r1
			ReadData[0] = 'X';
		}
		
		
		//ReadData[0] = 'X';//---empfangene Zeichen zurücksetzen
		if (SpeedLeft < 85) {
 36a:	f4 e5       	ldi	r31, 0x54	; 84
 36c:	f7 15       	cp	r31, r7
 36e:	20 f0       	brcs	.+8      	; 0x378 <main+0x1ea>
			SpeedLeft = 85; 
 370:	0f 2e       	mov	r0, r31
 372:	f5 e5       	ldi	r31, 0x55	; 85
 374:	7f 2e       	mov	r7, r31
 376:	f0 2d       	mov	r31, r0
		}
		if (SpeedRight < 85){
 378:	24 e5       	ldi	r18, 0x54	; 84
 37a:	26 15       	cp	r18, r6
 37c:	20 f0       	brcs	.+8      	; 0x386 <main+0x1f8>
			SpeedRight =85; 
 37e:	0f 2e       	mov	r0, r31
 380:	f5 e5       	ldi	r31, 0x55	; 85
 382:	6f 2e       	mov	r6, r31
 384:	f0 2d       	mov	r31, r0
		}
		setMotor(DirLeft, DirRight, SpeedLeft, SpeedRight);
 386:	26 2d       	mov	r18, r6
 388:	47 2d       	mov	r20, r7
 38a:	65 2d       	mov	r22, r5
 38c:	84 2d       	mov	r24, r4
 38e:	f4 de       	rcall	.-536    	; 0x178 <setMotor>
		
//---------------------------------------------------------Handshake 
		if (handshake == 1)
 390:	31 e0       	ldi	r19, 0x01	; 1
 392:	83 16       	cp	r8, r19
 394:	91 04       	cpc	r9, r1
 396:	a1 04       	cpc	r10, r1
 398:	b1 04       	cpc	r11, r1
 39a:	09 f0       	breq	.+2      	; 0x39e <main+0x210>
 39c:	1e cf       	rjmp	.-452    	; 0x1da <main+0x4c>
		{
			usart_puts("Handshake ");
 39e:	87 e6       	ldi	r24, 0x67	; 103
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	95 d0       	rcall	.+298    	; 0x4ce <usart_puts>
			handshake = 0;  
 3a4:	82 2c       	mov	r8, r2
 3a6:	93 2c       	mov	r9, r3
 3a8:	a1 2c       	mov	r10, r1
 3aa:	b1 2c       	mov	r11, r1
 3ac:	16 cf       	rjmp	.-468    	; 0x1da <main+0x4c>

000003ae <usart_init_intr>:
//=======================================================================
void usart_init_intr(uint16_t baud){
	const uint32_t fosz=8000000L;
	uint16_t baud_wert;

	lesezeiger=puffer;
 3ae:	47 e7       	ldi	r20, 0x77	; 119
 3b0:	50 e0       	ldi	r21, 0x00	; 0
 3b2:	50 93 76 00 	sts	0x0076, r21
 3b6:	40 93 75 00 	sts	0x0075, r20
	schreibzeiger=puffer;
 3ba:	50 93 74 00 	sts	0x0074, r21
 3be:	40 93 73 00 	sts	0x0073, r20



	//Baudrate einstellen
	baud_wert=fosz/(baud*16L)-1;
 3c2:	a0 e0       	ldi	r26, 0x00	; 0
 3c4:	b0 e0       	ldi	r27, 0x00	; 0
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	aa 1f       	adc	r26, r26
 3cc:	bb 1f       	adc	r27, r27
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	aa 1f       	adc	r26, r26
 3d4:	bb 1f       	adc	r27, r27
 3d6:	9c 01       	movw	r18, r24
 3d8:	ad 01       	movw	r20, r26
 3da:	22 0f       	add	r18, r18
 3dc:	33 1f       	adc	r19, r19
 3de:	44 1f       	adc	r20, r20
 3e0:	55 1f       	adc	r21, r21
 3e2:	22 0f       	add	r18, r18
 3e4:	33 1f       	adc	r19, r19
 3e6:	44 1f       	adc	r20, r20
 3e8:	55 1f       	adc	r21, r21
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	72 e1       	ldi	r23, 0x12	; 18
 3ee:	8a e7       	ldi	r24, 0x7A	; 122
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	96 d1       	rcall	.+812    	; 0x720 <__udivmodsi4>
 3f4:	21 50       	subi	r18, 0x01	; 1
 3f6:	31 09       	sbc	r19, r1
	UBRRH=(uint8_t)(baud_wert>>8);
 3f8:	30 bd       	out	0x20, r19	; 32
	UBRRL=(uint8_t)baud_wert;
 3fa:	29 b9       	out	0x09, r18	; 9

	//8N1 Daten
	UCSRC|=(1<<URSEL)|(3<<UCSZ0);
 3fc:	80 b5       	in	r24, 0x20	; 32
 3fe:	86 68       	ori	r24, 0x86	; 134
 400:	80 bd       	out	0x20, r24	; 32
	//Empfangen und Senden und Empfangsinterrupt aktivieren
	UCSRB=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
 402:	88 e9       	ldi	r24, 0x98	; 152
 404:	8a b9       	out	0x0a, r24	; 10
 406:	08 95       	ret

00000408 <__vector_11>:
}

//=============================================================
// Interrupt-Service-Routine
//=============================================================
ISR (USART_RXC_vect){
 408:	1f 92       	push	r1
 40a:	0f 92       	push	r0
 40c:	0f b6       	in	r0, 0x3f	; 63
 40e:	0f 92       	push	r0
 410:	11 24       	eor	r1, r1
 412:	2f 93       	push	r18
 414:	8f 93       	push	r24
 416:	9f 93       	push	r25
 418:	ef 93       	push	r30
 41a:	ff 93       	push	r31

	//Automatisch empfangene Daten in den Puffer schreiben:

	*schreibzeiger=UDR;
 41c:	e0 91 73 00 	lds	r30, 0x0073
 420:	f0 91 74 00 	lds	r31, 0x0074
 424:	8c b1       	in	r24, 0x0c	; 12
 426:	80 83       	st	Z, r24
	schreibzeiger++;
 428:	80 91 73 00 	lds	r24, 0x0073
 42c:	90 91 74 00 	lds	r25, 0x0074
 430:	01 96       	adiw	r24, 0x01	; 1
	if(schreibzeiger==puffer+PUFFER_GROESSE) 
 432:	20 e0       	ldi	r18, 0x00	; 0
 434:	87 3f       	cpi	r24, 0xF7	; 247
 436:	92 07       	cpc	r25, r18
 438:	29 f0       	breq	.+10     	; 0x444 <__vector_11+0x3c>
ISR (USART_RXC_vect){

	//Automatisch empfangene Daten in den Puffer schreiben:

	*schreibzeiger=UDR;
	schreibzeiger++;
 43a:	90 93 74 00 	sts	0x0074, r25
 43e:	80 93 73 00 	sts	0x0073, r24
 442:	06 c0       	rjmp	.+12     	; 0x450 <__vector_11+0x48>
	if(schreibzeiger==puffer+PUFFER_GROESSE) 
	schreibzeiger=puffer;
 444:	87 e7       	ldi	r24, 0x77	; 119
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	90 93 74 00 	sts	0x0074, r25
 44c:	80 93 73 00 	sts	0x0073, r24

}
 450:	ff 91       	pop	r31
 452:	ef 91       	pop	r30
 454:	9f 91       	pop	r25
 456:	8f 91       	pop	r24
 458:	2f 91       	pop	r18
 45a:	0f 90       	pop	r0
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	0f 90       	pop	r0
 460:	1f 90       	pop	r1
 462:	18 95       	reti

00000464 <usart_byte_avail_intr>:
//Funktionen für den interrupt-gesteuerten Datenempfang
//=============================================================
uint8_t usart_byte_avail_intr(void){
	//Prüft, ob ein Datenbyte im Puffer vorhanden ist
	// 1 = vorhanden, 0 = nicht vorhanden
	SleepMS(10); 
 464:	60 e0       	ldi	r22, 0x00	; 0
 466:	70 e0       	ldi	r23, 0x00	; 0
 468:	80 e2       	ldi	r24, 0x20	; 32
 46a:	91 e4       	ldi	r25, 0x41	; 65
 46c:	7c de       	rcall	.-776    	; 0x166 <SleepMS>
	if(schreibzeiger!=lesezeiger)
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	40 91 73 00 	lds	r20, 0x0073
 474:	50 91 74 00 	lds	r21, 0x0074
 478:	20 91 75 00 	lds	r18, 0x0075
 47c:	30 91 76 00 	lds	r19, 0x0076
 480:	42 17       	cp	r20, r18
 482:	53 07       	cpc	r21, r19
 484:	09 f4       	brne	.+2      	; 0x488 <usart_byte_avail_intr+0x24>
 486:	80 e0       	ldi	r24, 0x00	; 0
	return 1;
	else return 0;
}
 488:	08 95       	ret

0000048a <usart_getc_intr>:
	//Liest ein Byte aus dem Puffer
	//Nur aufrufen, wenn usart_byte_avail_intr() vorher aufgerufen wurde und
	//eine 1 lieferte.
	uint8_t datenbyte=0;

	if(schreibzeiger!=lesezeiger){
 48a:	e0 91 75 00 	lds	r30, 0x0075
 48e:	f0 91 76 00 	lds	r31, 0x0076
 492:	80 91 73 00 	lds	r24, 0x0073
 496:	90 91 74 00 	lds	r25, 0x0074
 49a:	8e 17       	cp	r24, r30
 49c:	9f 07       	cpc	r25, r31
 49e:	89 f0       	breq	.+34     	; 0x4c2 <usart_getc_intr+0x38>

		datenbyte=*lesezeiger;
 4a0:	81 91       	ld	r24, Z+
		lesezeiger++;
		if(lesezeiger==puffer+PUFFER_GROESSE) lesezeiger=puffer;
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	e7 3f       	cpi	r30, 0xF7	; 247
 4a6:	f9 07       	cpc	r31, r25
 4a8:	29 f0       	breq	.+10     	; 0x4b4 <usart_getc_intr+0x2a>
	uint8_t datenbyte=0;

	if(schreibzeiger!=lesezeiger){

		datenbyte=*lesezeiger;
		lesezeiger++;
 4aa:	f0 93 76 00 	sts	0x0076, r31
 4ae:	e0 93 75 00 	sts	0x0075, r30
 4b2:	08 95       	ret
		if(lesezeiger==puffer+PUFFER_GROESSE) lesezeiger=puffer;
 4b4:	27 e7       	ldi	r18, 0x77	; 119
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	30 93 76 00 	sts	0x0076, r19
 4bc:	20 93 75 00 	sts	0x0075, r18
 4c0:	08 95       	ret
//--------------------------------------------------------------
uint8_t usart_getc_intr(void){
	//Liest ein Byte aus dem Puffer
	//Nur aufrufen, wenn usart_byte_avail_intr() vorher aufgerufen wurde und
	//eine 1 lieferte.
	uint8_t datenbyte=0;
 4c2:	80 e0       	ldi	r24, 0x00	; 0
		lesezeiger++;
		if(lesezeiger==puffer+PUFFER_GROESSE) lesezeiger=puffer;
		
	}
	return datenbyte;
}
 4c4:	08 95       	ret

000004c6 <usart_putc>:
//=============================================================
//Die nachfolgenden Sendefunktionen sind nicht interrupt-gesteuert
//=============================================================
void usart_putc(uint8_t byte){
	//Ein Byte senden
	while(!(UCSRA&(1<<UDRE)));//warten auf Datenregister empty
 4c6:	5d 9b       	sbis	0x0b, 5	; 11
 4c8:	fe cf       	rjmp	.-4      	; 0x4c6 <usart_putc>
	UDR=byte;
 4ca:	8c b9       	out	0x0c, r24	; 12
 4cc:	08 95       	ret

000004ce <usart_puts>:
}
//--------------------------------------------------------------
void usart_puts(char *s)
//Einen String mit Endmarke 0 senden
{
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
 4d2:	ec 01       	movw	r28, r24

	while (*s != 0) {
 4d4:	88 81       	ld	r24, Y
 4d6:	88 23       	and	r24, r24
 4d8:	29 f0       	breq	.+10     	; 0x4e4 <usart_puts+0x16>
 4da:	21 96       	adiw	r28, 0x01	; 1
		usart_putc(*s);
 4dc:	f4 df       	rcall	.-24     	; 0x4c6 <usart_putc>
//--------------------------------------------------------------
void usart_puts(char *s)
//Einen String mit Endmarke 0 senden
{

	while (*s != 0) {
 4de:	89 91       	ld	r24, Y+
 4e0:	81 11       	cpse	r24, r1
 4e2:	fc cf       	rjmp	.-8      	; 0x4dc <usart_puts+0xe>
		usart_putc(*s);
		s++;
	}
	//usart_putc(0); //Endmarke 0 wird übertragen!
}
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	08 95       	ret

000004ea <usart_puti>:
		s++; 
	}
	//usart_putc(0); //Endmarke 0 wird übertragen!
}
//---------------------------------------------------------------
void usart_puti(int zahl, int sges){
 4ea:	ff 92       	push	r15
 4ec:	0f 93       	push	r16
 4ee:	1f 93       	push	r17
 4f0:	cf 93       	push	r28
 4f2:	df 93       	push	r29
 4f4:	cd b7       	in	r28, 0x3d	; 61
 4f6:	de b7       	in	r29, 0x3e	; 62
 4f8:	60 97       	sbiw	r28, 0x10	; 16
 4fa:	0f b6       	in	r0, 0x3f	; 63
 4fc:	f8 94       	cli
 4fe:	de bf       	out	0x3e, r29	; 62
 500:	0f be       	out	0x3f, r0	; 63
 502:	cd bf       	out	0x3d, r28	; 61
 504:	8b 01       	movw	r16, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 506:	4a e0       	ldi	r20, 0x0A	; 10
 508:	be 01       	movw	r22, r28
 50a:	6f 5f       	subi	r22, 0xFF	; 255
 50c:	7f 4f       	sbci	r23, 0xFF	; 255
 50e:	50 d1       	rcall	.+672    	; 0x7b0 <__itoa_ncheck>
	//als Zeichenkette
	char buffer[16];
	uint8_t l=0,n;
	char *z=buffer;
	itoa(zahl,buffer,10);
	while(*z!=0){l++; z++;}//Bufferlänge l
 510:	89 81       	ldd	r24, Y+1	; 0x01
 512:	88 23       	and	r24, r24
 514:	41 f0       	breq	.+16     	; 0x526 <usart_puti+0x3c>
 516:	fe 01       	movw	r30, r28
 518:	32 96       	adiw	r30, 0x02	; 2
//---------------------------------------------------------------
void usart_puti(int zahl, int sges){
	//Senden der Integerzahl zahl als Zeichenkette formatiert  mit sges Stellen
	//als Zeichenkette
	char buffer[16];
	uint8_t l=0,n;
 51a:	f1 2c       	mov	r15, r1
	char *z=buffer;
	itoa(zahl,buffer,10);
	while(*z!=0){l++; z++;}//Bufferlänge l
 51c:	f3 94       	inc	r15
 51e:	81 91       	ld	r24, Z+
 520:	81 11       	cpse	r24, r1
 522:	fc cf       	rjmp	.-8      	; 0x51c <usart_puti+0x32>
 524:	01 c0       	rjmp	.+2      	; 0x528 <usart_puti+0x3e>
//---------------------------------------------------------------
void usart_puti(int zahl, int sges){
	//Senden der Integerzahl zahl als Zeichenkette formatiert  mit sges Stellen
	//als Zeichenkette
	char buffer[16];
	uint8_t l=0,n;
 526:	f1 2c       	mov	r15, r1
	char *z=buffer;
	itoa(zahl,buffer,10);
	while(*z!=0){l++; z++;}//Bufferlänge l
	for(n=l;n<sges;n++) usart_putc(' ');
 528:	8f 2d       	mov	r24, r15
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	80 17       	cp	r24, r16
 52e:	91 07       	cpc	r25, r17
 530:	44 f4       	brge	.+16     	; 0x542 <usart_puti+0x58>
 532:	80 e2       	ldi	r24, 0x20	; 32
 534:	c8 df       	rcall	.-112    	; 0x4c6 <usart_putc>
 536:	f3 94       	inc	r15
 538:	8f 2d       	mov	r24, r15
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	80 17       	cp	r24, r16
 53e:	91 07       	cpc	r25, r17
 540:	c4 f3       	brlt	.-16     	; 0x532 <usart_puti+0x48>
	usart_puts(buffer);
 542:	ce 01       	movw	r24, r28
 544:	01 96       	adiw	r24, 0x01	; 1
 546:	c3 df       	rcall	.-122    	; 0x4ce <usart_puts>
}
 548:	60 96       	adiw	r28, 0x10	; 16
 54a:	0f b6       	in	r0, 0x3f	; 63
 54c:	f8 94       	cli
 54e:	de bf       	out	0x3e, r29	; 62
 550:	0f be       	out	0x3f, r0	; 63
 552:	cd bf       	out	0x3d, r28	; 61
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	1f 91       	pop	r17
 55a:	0f 91       	pop	r16
 55c:	ff 90       	pop	r15
 55e:	08 95       	ret

00000560 <__fixunssfsi>:
 560:	5b d0       	rcall	.+182    	; 0x618 <__fp_splitA>
 562:	88 f0       	brcs	.+34     	; 0x586 <__fixunssfsi+0x26>
 564:	9f 57       	subi	r25, 0x7F	; 127
 566:	90 f0       	brcs	.+36     	; 0x58c <__fixunssfsi+0x2c>
 568:	b9 2f       	mov	r27, r25
 56a:	99 27       	eor	r25, r25
 56c:	b7 51       	subi	r27, 0x17	; 23
 56e:	a0 f0       	brcs	.+40     	; 0x598 <__fixunssfsi+0x38>
 570:	d1 f0       	breq	.+52     	; 0x5a6 <__fixunssfsi+0x46>
 572:	66 0f       	add	r22, r22
 574:	77 1f       	adc	r23, r23
 576:	88 1f       	adc	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	1a f0       	brmi	.+6      	; 0x582 <__fixunssfsi+0x22>
 57c:	ba 95       	dec	r27
 57e:	c9 f7       	brne	.-14     	; 0x572 <__fixunssfsi+0x12>
 580:	12 c0       	rjmp	.+36     	; 0x5a6 <__fixunssfsi+0x46>
 582:	b1 30       	cpi	r27, 0x01	; 1
 584:	81 f0       	breq	.+32     	; 0x5a6 <__fixunssfsi+0x46>
 586:	62 d0       	rcall	.+196    	; 0x64c <__fp_zero>
 588:	b1 e0       	ldi	r27, 0x01	; 1
 58a:	08 95       	ret
 58c:	5f c0       	rjmp	.+190    	; 0x64c <__fp_zero>
 58e:	67 2f       	mov	r22, r23
 590:	78 2f       	mov	r23, r24
 592:	88 27       	eor	r24, r24
 594:	b8 5f       	subi	r27, 0xF8	; 248
 596:	39 f0       	breq	.+14     	; 0x5a6 <__fixunssfsi+0x46>
 598:	b9 3f       	cpi	r27, 0xF9	; 249
 59a:	cc f3       	brlt	.-14     	; 0x58e <__fixunssfsi+0x2e>
 59c:	86 95       	lsr	r24
 59e:	77 95       	ror	r23
 5a0:	67 95       	ror	r22
 5a2:	b3 95       	inc	r27
 5a4:	d9 f7       	brne	.-10     	; 0x59c <__fixunssfsi+0x3c>
 5a6:	3e f4       	brtc	.+14     	; 0x5b6 <__fixunssfsi+0x56>
 5a8:	90 95       	com	r25
 5aa:	80 95       	com	r24
 5ac:	70 95       	com	r23
 5ae:	61 95       	neg	r22
 5b0:	7f 4f       	sbci	r23, 0xFF	; 255
 5b2:	8f 4f       	sbci	r24, 0xFF	; 255
 5b4:	9f 4f       	sbci	r25, 0xFF	; 255
 5b6:	08 95       	ret

000005b8 <__fp_inf>:
 5b8:	97 f9       	bld	r25, 7
 5ba:	9f 67       	ori	r25, 0x7F	; 127
 5bc:	80 e8       	ldi	r24, 0x80	; 128
 5be:	70 e0       	ldi	r23, 0x00	; 0
 5c0:	60 e0       	ldi	r22, 0x00	; 0
 5c2:	08 95       	ret

000005c4 <__fp_nan>:
 5c4:	9f ef       	ldi	r25, 0xFF	; 255
 5c6:	80 ec       	ldi	r24, 0xC0	; 192
 5c8:	08 95       	ret

000005ca <__fp_pscA>:
 5ca:	00 24       	eor	r0, r0
 5cc:	0a 94       	dec	r0
 5ce:	16 16       	cp	r1, r22
 5d0:	17 06       	cpc	r1, r23
 5d2:	18 06       	cpc	r1, r24
 5d4:	09 06       	cpc	r0, r25
 5d6:	08 95       	ret

000005d8 <__fp_pscB>:
 5d8:	00 24       	eor	r0, r0
 5da:	0a 94       	dec	r0
 5dc:	12 16       	cp	r1, r18
 5de:	13 06       	cpc	r1, r19
 5e0:	14 06       	cpc	r1, r20
 5e2:	05 06       	cpc	r0, r21
 5e4:	08 95       	ret

000005e6 <__fp_round>:
 5e6:	09 2e       	mov	r0, r25
 5e8:	03 94       	inc	r0
 5ea:	00 0c       	add	r0, r0
 5ec:	11 f4       	brne	.+4      	; 0x5f2 <__fp_round+0xc>
 5ee:	88 23       	and	r24, r24
 5f0:	52 f0       	brmi	.+20     	; 0x606 <__fp_round+0x20>
 5f2:	bb 0f       	add	r27, r27
 5f4:	40 f4       	brcc	.+16     	; 0x606 <__fp_round+0x20>
 5f6:	bf 2b       	or	r27, r31
 5f8:	11 f4       	brne	.+4      	; 0x5fe <__fp_round+0x18>
 5fa:	60 ff       	sbrs	r22, 0
 5fc:	04 c0       	rjmp	.+8      	; 0x606 <__fp_round+0x20>
 5fe:	6f 5f       	subi	r22, 0xFF	; 255
 600:	7f 4f       	sbci	r23, 0xFF	; 255
 602:	8f 4f       	sbci	r24, 0xFF	; 255
 604:	9f 4f       	sbci	r25, 0xFF	; 255
 606:	08 95       	ret

00000608 <__fp_split3>:
 608:	57 fd       	sbrc	r21, 7
 60a:	90 58       	subi	r25, 0x80	; 128
 60c:	44 0f       	add	r20, r20
 60e:	55 1f       	adc	r21, r21
 610:	59 f0       	breq	.+22     	; 0x628 <__fp_splitA+0x10>
 612:	5f 3f       	cpi	r21, 0xFF	; 255
 614:	71 f0       	breq	.+28     	; 0x632 <__fp_splitA+0x1a>
 616:	47 95       	ror	r20

00000618 <__fp_splitA>:
 618:	88 0f       	add	r24, r24
 61a:	97 fb       	bst	r25, 7
 61c:	99 1f       	adc	r25, r25
 61e:	61 f0       	breq	.+24     	; 0x638 <__fp_splitA+0x20>
 620:	9f 3f       	cpi	r25, 0xFF	; 255
 622:	79 f0       	breq	.+30     	; 0x642 <__fp_splitA+0x2a>
 624:	87 95       	ror	r24
 626:	08 95       	ret
 628:	12 16       	cp	r1, r18
 62a:	13 06       	cpc	r1, r19
 62c:	14 06       	cpc	r1, r20
 62e:	55 1f       	adc	r21, r21
 630:	f2 cf       	rjmp	.-28     	; 0x616 <__fp_split3+0xe>
 632:	46 95       	lsr	r20
 634:	f1 df       	rcall	.-30     	; 0x618 <__fp_splitA>
 636:	08 c0       	rjmp	.+16     	; 0x648 <__fp_splitA+0x30>
 638:	16 16       	cp	r1, r22
 63a:	17 06       	cpc	r1, r23
 63c:	18 06       	cpc	r1, r24
 63e:	99 1f       	adc	r25, r25
 640:	f1 cf       	rjmp	.-30     	; 0x624 <__fp_splitA+0xc>
 642:	86 95       	lsr	r24
 644:	71 05       	cpc	r23, r1
 646:	61 05       	cpc	r22, r1
 648:	08 94       	sec
 64a:	08 95       	ret

0000064c <__fp_zero>:
 64c:	e8 94       	clt

0000064e <__fp_szero>:
 64e:	bb 27       	eor	r27, r27
 650:	66 27       	eor	r22, r22
 652:	77 27       	eor	r23, r23
 654:	cb 01       	movw	r24, r22
 656:	97 f9       	bld	r25, 7
 658:	08 95       	ret

0000065a <__mulsf3>:
 65a:	0b d0       	rcall	.+22     	; 0x672 <__mulsf3x>
 65c:	c4 cf       	rjmp	.-120    	; 0x5e6 <__fp_round>
 65e:	b5 df       	rcall	.-150    	; 0x5ca <__fp_pscA>
 660:	28 f0       	brcs	.+10     	; 0x66c <__mulsf3+0x12>
 662:	ba df       	rcall	.-140    	; 0x5d8 <__fp_pscB>
 664:	18 f0       	brcs	.+6      	; 0x66c <__mulsf3+0x12>
 666:	95 23       	and	r25, r21
 668:	09 f0       	breq	.+2      	; 0x66c <__mulsf3+0x12>
 66a:	a6 cf       	rjmp	.-180    	; 0x5b8 <__fp_inf>
 66c:	ab cf       	rjmp	.-170    	; 0x5c4 <__fp_nan>
 66e:	11 24       	eor	r1, r1
 670:	ee cf       	rjmp	.-36     	; 0x64e <__fp_szero>

00000672 <__mulsf3x>:
 672:	ca df       	rcall	.-108    	; 0x608 <__fp_split3>
 674:	a0 f3       	brcs	.-24     	; 0x65e <__mulsf3+0x4>

00000676 <__mulsf3_pse>:
 676:	95 9f       	mul	r25, r21
 678:	d1 f3       	breq	.-12     	; 0x66e <__mulsf3+0x14>
 67a:	95 0f       	add	r25, r21
 67c:	50 e0       	ldi	r21, 0x00	; 0
 67e:	55 1f       	adc	r21, r21
 680:	62 9f       	mul	r22, r18
 682:	f0 01       	movw	r30, r0
 684:	72 9f       	mul	r23, r18
 686:	bb 27       	eor	r27, r27
 688:	f0 0d       	add	r31, r0
 68a:	b1 1d       	adc	r27, r1
 68c:	63 9f       	mul	r22, r19
 68e:	aa 27       	eor	r26, r26
 690:	f0 0d       	add	r31, r0
 692:	b1 1d       	adc	r27, r1
 694:	aa 1f       	adc	r26, r26
 696:	64 9f       	mul	r22, r20
 698:	66 27       	eor	r22, r22
 69a:	b0 0d       	add	r27, r0
 69c:	a1 1d       	adc	r26, r1
 69e:	66 1f       	adc	r22, r22
 6a0:	82 9f       	mul	r24, r18
 6a2:	22 27       	eor	r18, r18
 6a4:	b0 0d       	add	r27, r0
 6a6:	a1 1d       	adc	r26, r1
 6a8:	62 1f       	adc	r22, r18
 6aa:	73 9f       	mul	r23, r19
 6ac:	b0 0d       	add	r27, r0
 6ae:	a1 1d       	adc	r26, r1
 6b0:	62 1f       	adc	r22, r18
 6b2:	83 9f       	mul	r24, r19
 6b4:	a0 0d       	add	r26, r0
 6b6:	61 1d       	adc	r22, r1
 6b8:	22 1f       	adc	r18, r18
 6ba:	74 9f       	mul	r23, r20
 6bc:	33 27       	eor	r19, r19
 6be:	a0 0d       	add	r26, r0
 6c0:	61 1d       	adc	r22, r1
 6c2:	23 1f       	adc	r18, r19
 6c4:	84 9f       	mul	r24, r20
 6c6:	60 0d       	add	r22, r0
 6c8:	21 1d       	adc	r18, r1
 6ca:	82 2f       	mov	r24, r18
 6cc:	76 2f       	mov	r23, r22
 6ce:	6a 2f       	mov	r22, r26
 6d0:	11 24       	eor	r1, r1
 6d2:	9f 57       	subi	r25, 0x7F	; 127
 6d4:	50 40       	sbci	r21, 0x00	; 0
 6d6:	8a f0       	brmi	.+34     	; 0x6fa <__mulsf3_pse+0x84>
 6d8:	e1 f0       	breq	.+56     	; 0x712 <__mulsf3_pse+0x9c>
 6da:	88 23       	and	r24, r24
 6dc:	4a f0       	brmi	.+18     	; 0x6f0 <__mulsf3_pse+0x7a>
 6de:	ee 0f       	add	r30, r30
 6e0:	ff 1f       	adc	r31, r31
 6e2:	bb 1f       	adc	r27, r27
 6e4:	66 1f       	adc	r22, r22
 6e6:	77 1f       	adc	r23, r23
 6e8:	88 1f       	adc	r24, r24
 6ea:	91 50       	subi	r25, 0x01	; 1
 6ec:	50 40       	sbci	r21, 0x00	; 0
 6ee:	a9 f7       	brne	.-22     	; 0x6da <__mulsf3_pse+0x64>
 6f0:	9e 3f       	cpi	r25, 0xFE	; 254
 6f2:	51 05       	cpc	r21, r1
 6f4:	70 f0       	brcs	.+28     	; 0x712 <__mulsf3_pse+0x9c>
 6f6:	60 cf       	rjmp	.-320    	; 0x5b8 <__fp_inf>
 6f8:	aa cf       	rjmp	.-172    	; 0x64e <__fp_szero>
 6fa:	5f 3f       	cpi	r21, 0xFF	; 255
 6fc:	ec f3       	brlt	.-6      	; 0x6f8 <__mulsf3_pse+0x82>
 6fe:	98 3e       	cpi	r25, 0xE8	; 232
 700:	dc f3       	brlt	.-10     	; 0x6f8 <__mulsf3_pse+0x82>
 702:	86 95       	lsr	r24
 704:	77 95       	ror	r23
 706:	67 95       	ror	r22
 708:	b7 95       	ror	r27
 70a:	f7 95       	ror	r31
 70c:	e7 95       	ror	r30
 70e:	9f 5f       	subi	r25, 0xFF	; 255
 710:	c1 f7       	brne	.-16     	; 0x702 <__mulsf3_pse+0x8c>
 712:	fe 2b       	or	r31, r30
 714:	88 0f       	add	r24, r24
 716:	91 1d       	adc	r25, r1
 718:	96 95       	lsr	r25
 71a:	87 95       	ror	r24
 71c:	97 f9       	bld	r25, 7
 71e:	08 95       	ret

00000720 <__udivmodsi4>:
 720:	a1 e2       	ldi	r26, 0x21	; 33
 722:	1a 2e       	mov	r1, r26
 724:	aa 1b       	sub	r26, r26
 726:	bb 1b       	sub	r27, r27
 728:	fd 01       	movw	r30, r26
 72a:	0d c0       	rjmp	.+26     	; 0x746 <__udivmodsi4_ep>

0000072c <__udivmodsi4_loop>:
 72c:	aa 1f       	adc	r26, r26
 72e:	bb 1f       	adc	r27, r27
 730:	ee 1f       	adc	r30, r30
 732:	ff 1f       	adc	r31, r31
 734:	a2 17       	cp	r26, r18
 736:	b3 07       	cpc	r27, r19
 738:	e4 07       	cpc	r30, r20
 73a:	f5 07       	cpc	r31, r21
 73c:	20 f0       	brcs	.+8      	; 0x746 <__udivmodsi4_ep>
 73e:	a2 1b       	sub	r26, r18
 740:	b3 0b       	sbc	r27, r19
 742:	e4 0b       	sbc	r30, r20
 744:	f5 0b       	sbc	r31, r21

00000746 <__udivmodsi4_ep>:
 746:	66 1f       	adc	r22, r22
 748:	77 1f       	adc	r23, r23
 74a:	88 1f       	adc	r24, r24
 74c:	99 1f       	adc	r25, r25
 74e:	1a 94       	dec	r1
 750:	69 f7       	brne	.-38     	; 0x72c <__udivmodsi4_loop>
 752:	60 95       	com	r22
 754:	70 95       	com	r23
 756:	80 95       	com	r24
 758:	90 95       	com	r25
 75a:	9b 01       	movw	r18, r22
 75c:	ac 01       	movw	r20, r24
 75e:	bd 01       	movw	r22, r26
 760:	cf 01       	movw	r24, r30
 762:	08 95       	ret

00000764 <atol>:
 764:	1f 93       	push	r17
 766:	fc 01       	movw	r30, r24
 768:	99 27       	eor	r25, r25
 76a:	88 27       	eor	r24, r24
 76c:	bc 01       	movw	r22, r24
 76e:	e8 94       	clt
 770:	11 91       	ld	r17, Z+
 772:	10 32       	cpi	r17, 0x20	; 32
 774:	e9 f3       	breq	.-6      	; 0x770 <atol+0xc>
 776:	19 30       	cpi	r17, 0x09	; 9
 778:	10 f0       	brcs	.+4      	; 0x77e <atol+0x1a>
 77a:	1e 30       	cpi	r17, 0x0E	; 14
 77c:	c8 f3       	brcs	.-14     	; 0x770 <atol+0xc>
 77e:	1b 32       	cpi	r17, 0x2B	; 43
 780:	49 f0       	breq	.+18     	; 0x794 <atol+0x30>
 782:	1d 32       	cpi	r17, 0x2D	; 45
 784:	41 f4       	brne	.+16     	; 0x796 <atol+0x32>
 786:	68 94       	set
 788:	05 c0       	rjmp	.+10     	; 0x794 <atol+0x30>
 78a:	1c d0       	rcall	.+56     	; 0x7c4 <__mulsi_const_10>
 78c:	61 0f       	add	r22, r17
 78e:	71 1d       	adc	r23, r1
 790:	81 1d       	adc	r24, r1
 792:	91 1d       	adc	r25, r1
 794:	11 91       	ld	r17, Z+
 796:	10 53       	subi	r17, 0x30	; 48
 798:	1a 30       	cpi	r17, 0x0A	; 10
 79a:	b8 f3       	brcs	.-18     	; 0x78a <atol+0x26>
 79c:	3e f4       	brtc	.+14     	; 0x7ac <atol+0x48>
 79e:	90 95       	com	r25
 7a0:	80 95       	com	r24
 7a2:	70 95       	com	r23
 7a4:	61 95       	neg	r22
 7a6:	7f 4f       	sbci	r23, 0xFF	; 255
 7a8:	8f 4f       	sbci	r24, 0xFF	; 255
 7aa:	9f 4f       	sbci	r25, 0xFF	; 255
 7ac:	1f 91       	pop	r17
 7ae:	08 95       	ret

000007b0 <__itoa_ncheck>:
 7b0:	bb 27       	eor	r27, r27
 7b2:	4a 30       	cpi	r20, 0x0A	; 10
 7b4:	31 f4       	brne	.+12     	; 0x7c2 <__itoa_ncheck+0x12>
 7b6:	99 23       	and	r25, r25
 7b8:	22 f4       	brpl	.+8      	; 0x7c2 <__itoa_ncheck+0x12>
 7ba:	bd e2       	ldi	r27, 0x2D	; 45
 7bc:	90 95       	com	r25
 7be:	81 95       	neg	r24
 7c0:	9f 4f       	sbci	r25, 0xFF	; 255
 7c2:	16 c0       	rjmp	.+44     	; 0x7f0 <__utoa_common>

000007c4 <__mulsi_const_10>:
 7c4:	59 2f       	mov	r21, r25
 7c6:	48 2f       	mov	r20, r24
 7c8:	37 2f       	mov	r19, r23
 7ca:	26 2f       	mov	r18, r22
 7cc:	66 0f       	add	r22, r22
 7ce:	77 1f       	adc	r23, r23
 7d0:	88 1f       	adc	r24, r24
 7d2:	99 1f       	adc	r25, r25
 7d4:	66 0f       	add	r22, r22
 7d6:	77 1f       	adc	r23, r23
 7d8:	88 1f       	adc	r24, r24
 7da:	99 1f       	adc	r25, r25
 7dc:	62 0f       	add	r22, r18
 7de:	73 1f       	adc	r23, r19
 7e0:	84 1f       	adc	r24, r20
 7e2:	95 1f       	adc	r25, r21
 7e4:	66 0f       	add	r22, r22
 7e6:	77 1f       	adc	r23, r23
 7e8:	88 1f       	adc	r24, r24
 7ea:	99 1f       	adc	r25, r25
 7ec:	08 95       	ret

000007ee <__utoa_ncheck>:
 7ee:	bb 27       	eor	r27, r27

000007f0 <__utoa_common>:
 7f0:	fb 01       	movw	r30, r22
 7f2:	55 27       	eor	r21, r21
 7f4:	aa 27       	eor	r26, r26
 7f6:	88 0f       	add	r24, r24
 7f8:	99 1f       	adc	r25, r25
 7fa:	aa 1f       	adc	r26, r26
 7fc:	a4 17       	cp	r26, r20
 7fe:	10 f0       	brcs	.+4      	; 0x804 <__utoa_common+0x14>
 800:	a4 1b       	sub	r26, r20
 802:	83 95       	inc	r24
 804:	50 51       	subi	r21, 0x10	; 16
 806:	b9 f7       	brne	.-18     	; 0x7f6 <__utoa_common+0x6>
 808:	a0 5d       	subi	r26, 0xD0	; 208
 80a:	aa 33       	cpi	r26, 0x3A	; 58
 80c:	08 f0       	brcs	.+2      	; 0x810 <__utoa_common+0x20>
 80e:	a9 5d       	subi	r26, 0xD9	; 217
 810:	a1 93       	st	Z+, r26
 812:	00 97       	sbiw	r24, 0x00	; 0
 814:	79 f7       	brne	.-34     	; 0x7f4 <__utoa_common+0x4>
 816:	b1 11       	cpse	r27, r1
 818:	b1 93       	st	Z+, r27
 81a:	11 92       	st	Z+, r1
 81c:	cb 01       	movw	r24, r22
 81e:	00 c0       	rjmp	.+0      	; 0x820 <strrev>

00000820 <strrev>:
 820:	dc 01       	movw	r26, r24
 822:	fc 01       	movw	r30, r24
 824:	67 2f       	mov	r22, r23
 826:	71 91       	ld	r23, Z+
 828:	77 23       	and	r23, r23
 82a:	e1 f7       	brne	.-8      	; 0x824 <strrev+0x4>
 82c:	32 97       	sbiw	r30, 0x02	; 2
 82e:	04 c0       	rjmp	.+8      	; 0x838 <strrev+0x18>
 830:	7c 91       	ld	r23, X
 832:	6d 93       	st	X+, r22
 834:	70 83       	st	Z, r23
 836:	62 91       	ld	r22, -Z
 838:	ae 17       	cp	r26, r30
 83a:	bf 07       	cpc	r27, r31
 83c:	c8 f3       	brcs	.-14     	; 0x830 <strrev+0x10>
 83e:	08 95       	ret

00000840 <_exit>:
 840:	f8 94       	cli

00000842 <__stop_program>:
 842:	ff cf       	rjmp	.-2      	; 0x842 <__stop_program>
