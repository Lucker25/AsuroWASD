
AsuroWASD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000996  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  00000996  00000a2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a0  008000a6  008000a6  00000a70  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000aa0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001633  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005c2  00000000  00000000  0000227f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000651  00000000  00000000  00002841  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000408  00000000  00000000  00002e94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e6  00000000  00000000  0000329c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012fa  00000000  00000000  00003782  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00004a7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__vector_3>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	a1 c2       	rjmp	.+1346   	; 0x55a <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 e9       	ldi	r30, 0x96	; 150
  3a:	f9 e0       	ldi	r31, 0x09	; 9
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 3a       	cpi	r26, 0xA6	; 166
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	a6 ea       	ldi	r26, 0xA6	; 166
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a6 34       	cpi	r26, 0x46	; 70
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	b4 d1       	rcall	.+872    	; 0x3c2 <main>
  5a:	9b c4       	rjmp	.+2358   	; 0x992 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_3>:
		if (time > timeout) data[0] = 'T'; //-----------------------änderung
	}
	/* blocking */
	else {
		while (i < length) {
			if (UCSRA & 0x80)
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
			data[i++] = UDR;
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
		}
		if (time > timeout) data[0] = 'T'; //-----------------------änderung
	}
	/* blocking */
	else {
		while (i < length) {
  66:	11 24       	eor	r1, r1
  68:	8f 93       	push	r24
  6a:	80 91 b2 00 	lds	r24, 0x00B2
			if (UCSRA & 0x80)
  6e:	8f 5f       	subi	r24, 0xFF	; 255
  70:	80 93 b2 00 	sts	0x00B2, r24
			data[i++] = UDR;
		}
	}
}
  74:	8f 91       	pop	r24
  76:	0f 90       	pop	r0
  78:	0f be       	out	0x3f, r0	; 63
  7a:	0f 90       	pop	r0
/* uses timer2 (36kHz for IR communication */
/* counts falling and rising edge => 36kHz*2 = 72kHz */
ISR (TIMER2_COMP_vect)
{
	count72kHz ++;
}
  7c:	1f 90       	pop	r1
  7e:	18 95       	reti

00000080 <MotorSpeed>:
}

/* Set motor speed */
void MotorSpeed(unsigned char left_speed, unsigned char right_speed)
{
	OCR1A = left_speed;
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	9b bd       	out	0x2b, r25	; 43
  84:	8a bd       	out	0x2a, r24	; 42
	OCR1B = right_speed;
  86:	70 e0       	ldi	r23, 0x00	; 0
  88:	79 bd       	out	0x29, r23	; 41
  8a:	68 bd       	out	0x28, r22	; 40
  8c:	08 95       	ret

0000008e <MotorDir>:
}

/* Set motor direction */
void MotorDir(unsigned char left_dir, unsigned char right_dir)
{
	PORTD = (PORTD &~ ((1 << PD4) | (1 << PD5))) | left_dir;
  8e:	92 b3       	in	r25, 0x12	; 18
  90:	9f 7c       	andi	r25, 0xCF	; 207
  92:	89 2b       	or	r24, r25
  94:	82 bb       	out	0x12, r24	; 18
	PORTB = (PORTB &~ ((1 << PB4) | (1 << PB5))) | right_dir;
  96:	88 b3       	in	r24, 0x18	; 24
  98:	8f 7c       	andi	r24, 0xCF	; 207
  9a:	68 2b       	or	r22, r24
  9c:	68 bb       	out	0x18, r22	; 24
  9e:	08 95       	ret

000000a0 <StatusLED>:
/* Status LED (OFF,GREEN,YELLOW,RED)*/
/* example code set StatusLED GREEN */
/* StatusLED(GREEN); */
void StatusLED(unsigned char color)
{
	if (color == OFF)    {GREEN_LED_OFF; RED_LED_OFF;}
  a0:	81 11       	cpse	r24, r1
  a2:	03 c0       	rjmp	.+6      	; 0xaa <StatusLED+0xa>
  a4:	c0 98       	cbi	0x18, 0	; 24
  a6:	92 98       	cbi	0x12, 2	; 18
  a8:	0a c0       	rjmp	.+20     	; 0xbe <StatusLED+0x1e>
	if (color == GREEN)  {GREEN_LED_ON; RED_LED_OFF;}
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	19 f4       	brne	.+6      	; 0xb4 <StatusLED+0x14>
  ae:	c0 9a       	sbi	0x18, 0	; 24
  b0:	92 98       	cbi	0x12, 2	; 18
  b2:	08 95       	ret
	if (color == YELLOW) {GREEN_LED_ON; RED_LED_ON;}
  b4:	83 30       	cpi	r24, 0x03	; 3
  b6:	19 f4       	brne	.+6      	; 0xbe <StatusLED+0x1e>
  b8:	c0 9a       	sbi	0x18, 0	; 24
  ba:	92 9a       	sbi	0x12, 2	; 18
  bc:	08 95       	ret
	if (color == RED)    {GREEN_LED_OFF; RED_LED_ON;}
  be:	82 30       	cpi	r24, 0x02	; 2
  c0:	11 f4       	brne	.+4      	; 0xc6 <StatusLED+0x26>
  c2:	c0 98       	cbi	0x18, 0	; 24
  c4:	92 9a       	sbi	0x12, 2	; 18
  c6:	08 95       	ret

000000c8 <FrontLED>:
/* Front LED */
/* example code FrontLED ON */
/* FrontLED(ON); */
void FrontLED(unsigned char status)
{
	PORTD = (PORTD &~(1 << PD6)) | (status << PD6);
  c8:	22 b3       	in	r18, 0x12	; 18
  ca:	30 e4       	ldi	r19, 0x40	; 64
  cc:	83 9f       	mul	r24, r19
  ce:	c0 01       	movw	r24, r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 7b       	andi	r18, 0xBF	; 191
  d4:	82 2b       	or	r24, r18
  d6:	82 bb       	out	0x12, r24	; 18
  d8:	08 95       	ret

000000da <BackLED>:
/* function for Break LEDs */
/* example code right LED On left LED Off */
/* BackLED(OFF,ON); */
void BackLED(unsigned char left, unsigned char right)
{
	if (left || right) {
  da:	81 11       	cpse	r24, r1
  dc:	0f c0       	rjmp	.+30     	; 0xfc <BackLED+0x22>
  de:	61 11       	cpse	r22, r1
  e0:	05 c0       	rjmp	.+10     	; 0xec <BackLED+0x12>
		PORTD &= ~(1 << PD7); // Wheel LED OFF
		DDRC |= (1 << PC0) | (1 << PC1); // Output => no odometrie
		PORTC |= (1 << PC0) | (1 << PC1);
	}
	if (!left) PORTC &= ~(1 << PC1);
  e2:	a9 98       	cbi	0x15, 1	; 21
	if (!right) PORTC &= ~(1 << PC0);
  e4:	61 11       	cpse	r22, r1
  e6:	12 c0       	rjmp	.+36     	; 0x10c <BackLED+0x32>
  e8:	a8 98       	cbi	0x15, 0	; 21
  ea:	08 95       	ret
/* example code right LED On left LED Off */
/* BackLED(OFF,ON); */
void BackLED(unsigned char left, unsigned char right)
{
	if (left || right) {
		PORTD &= ~(1 << PD7); // Wheel LED OFF
  ec:	97 98       	cbi	0x12, 7	; 18
		DDRC |= (1 << PC0) | (1 << PC1); // Output => no odometrie
  ee:	84 b3       	in	r24, 0x14	; 20
  f0:	83 60       	ori	r24, 0x03	; 3
  f2:	84 bb       	out	0x14, r24	; 20
		PORTC |= (1 << PC0) | (1 << PC1);
  f4:	85 b3       	in	r24, 0x15	; 21
  f6:	83 60       	ori	r24, 0x03	; 3
  f8:	85 bb       	out	0x15, r24	; 21
  fa:	f3 cf       	rjmp	.-26     	; 0xe2 <BackLED+0x8>
/* example code right LED On left LED Off */
/* BackLED(OFF,ON); */
void BackLED(unsigned char left, unsigned char right)
{
	if (left || right) {
		PORTD &= ~(1 << PD7); // Wheel LED OFF
  fc:	97 98       	cbi	0x12, 7	; 18
		DDRC |= (1 << PC0) | (1 << PC1); // Output => no odometrie
  fe:	84 b3       	in	r24, 0x14	; 20
 100:	83 60       	ori	r24, 0x03	; 3
 102:	84 bb       	out	0x14, r24	; 20
		PORTC |= (1 << PC0) | (1 << PC1);
 104:	85 b3       	in	r24, 0x15	; 21
 106:	83 60       	ori	r24, 0x03	; 3
 108:	85 bb       	out	0x15, r24	; 21
 10a:	ec cf       	rjmp	.-40     	; 0xe4 <BackLED+0xa>
 10c:	08 95       	ret

0000010e <Init>:
/* Init function Processor will be initalized to work correctly */
void Init (void)
{
	//-------- seriell interface programmed in boot routine and already running -------
	//  prepare 36kHz for IR - Communication
	TCCR2 = (1 << WGM21) | (1 << COM20) | (1 << CS20);
 10e:	89 e1       	ldi	r24, 0x19	; 25
 110:	85 bd       	out	0x25, r24	; 37
	OCR2  = 0x6E; // 36kHz @8MHz
 112:	8e e6       	ldi	r24, 0x6E	; 110
 114:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1 << OCIE2); // 36kHz counter for sleep
 116:	89 b7       	in	r24, 0x39	; 57
 118:	80 68       	ori	r24, 0x80	; 128
 11a:	89 bf       	out	0x39, r24	; 57
	//UCSRB = 0x00;
	//UCSRC = 0x86; // No Parity | 1 Stop Bit | 8 Data Bit
	//UBRRL = 0x33; // Baudrate 0x33 9600 //0xCF;-> 2400bps @ 8.00MHz
	
	// I/O Ports
	DDRB = IRTX | LEFT_DIR | PWM | GREEN_LED;
 11c:	8f e3       	ldi	r24, 0x3F	; 63
 11e:	87 bb       	out	0x17, r24	; 23
	DDRD = RIGHT_DIR | FRONT_LED | ODOMETRIE_LED | RED_LED;
 120:	84 ef       	ldi	r24, 0xF4	; 244
 122:	81 bb       	out	0x11, r24	; 17
	
	// for PWM (8-Bit PWM) on OC1A & OC1B
	TCCR1A = (1 << WGM10) | (1 << COM1A1) | (1 << COM1B1);
 124:	81 ea       	ldi	r24, 0xA1	; 161
 126:	8f bd       	out	0x2f, r24	; 47
	// tmr1 running on MCU clock/8
	TCCR1B = (1 << CS11);
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	8e bd       	out	0x2e, r24	; 46
	
	// A/D Conversion
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1); // clk/64
 12c:	86 e8       	ldi	r24, 0x86	; 134
 12e:	86 b9       	out	0x06, r24	; 6
	ODOMETRIE_LED_OFF;
 130:	97 98       	cbi	0x12, 7	; 18

	FrontLED(OFF);
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	c9 df       	rcall	.-110    	; 0xc8 <FrontLED>
	BackLED(ON,ON);
 136:	61 e0       	ldi	r22, 0x01	; 1
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	cf df       	rcall	.-98     	; 0xda <BackLED>
	BackLED(OFF,OFF);
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	cc df       	rcall	.-104    	; 0xda <BackLED>
	StatusLED(GREEN);
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	ad df       	rcall	.-166    	; 0xa0 <StatusLED>
	
	MotorDir(FWD,FWD);
 146:	60 e2       	ldi	r22, 0x20	; 32
 148:	80 e2       	ldi	r24, 0x20	; 32
 14a:	a1 df       	rcall	.-190    	; 0x8e <MotorDir>
}

/* Set motor speed */
void MotorSpeed(unsigned char left_speed, unsigned char right_speed)
{
	OCR1A = left_speed;
 14c:	1b bc       	out	0x2b, r1	; 43
 14e:	1a bc       	out	0x2a, r1	; 42
	OCR1B = right_speed;
 150:	19 bc       	out	0x29, r1	; 41
 152:	18 bc       	out	0x28, r1	; 40
	BackLED(OFF,OFF);
	StatusLED(GREEN);
	
	MotorDir(FWD,FWD);
	MotorSpeed(0,0);
	sei();
 154:	78 94       	sei
 156:	08 95       	ret

00000158 <OdometrieData>:
	data[1] = ADCL + (ADCH << 8);
}

/* function to read out odometrie phototransistors (left,rigth) */
void OdometrieData(unsigned int *data)
{
 158:	fc 01       	movw	r30, r24
	DDRC &= ~((1 << PC0) | (1 << PC1)); // Input => no break LED
 15a:	94 b3       	in	r25, 0x14	; 20
 15c:	9c 7f       	andi	r25, 0xFC	; 252
 15e:	94 bb       	out	0x14, r25	; 20
	ODOMETRIE_LED_ON;
 160:	97 9a       	sbi	0x12, 7	; 18
	
	ADMUX = (1 << REFS0) | WHEEL_LEFT; // AVCC reference with external capacitor
 162:	81 e4       	ldi	r24, 0x41	; 65
 164:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);			// Start conversion
 166:	36 9a       	sbi	0x06, 6	; 6
	while (!(ADCSRA & (1 << ADIF)));	// wait for conversion complete
 168:	34 9b       	sbis	0x06, 4	; 6
 16a:	fe cf       	rjmp	.-4      	; 0x168 <OdometrieData+0x10>
	ADCSRA |= (1 << ADIF);			// clear ADCIF
 16c:	34 9a       	sbi	0x06, 4	; 6
	data[0] = ADCL + (ADCH << 8);
 16e:	84 b1       	in	r24, 0x04	; 4
 170:	25 b1       	in	r18, 0x05	; 5
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	32 2f       	mov	r19, r18
 176:	22 27       	eor	r18, r18
 178:	28 0f       	add	r18, r24
 17a:	31 1d       	adc	r19, r1
 17c:	31 83       	std	Z+1, r19	; 0x01
 17e:	20 83       	st	Z, r18
	
	ADMUX = (1 << REFS0) | WHEEL_RIGHT; // AVCC reference with external capacitor
 180:	80 e4       	ldi	r24, 0x40	; 64
 182:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);			// Start conversion
 184:	36 9a       	sbi	0x06, 6	; 6
	while (!(ADCSRA & (1 << ADIF)));	// wait for conversion complete
 186:	34 9b       	sbis	0x06, 4	; 6
 188:	fe cf       	rjmp	.-4      	; 0x186 <OdometrieData+0x2e>
	ADCSRA |= (1 << ADIF);			// clear ADCIF
 18a:	34 9a       	sbi	0x06, 4	; 6
	data[1] = ADCL + (ADCH << 8);
 18c:	84 b1       	in	r24, 0x04	; 4
 18e:	25 b1       	in	r18, 0x05	; 5
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	32 2f       	mov	r19, r18
 194:	22 27       	eor	r18, r18
 196:	28 0f       	add	r18, r24
 198:	31 1d       	adc	r19, r1
 19a:	33 83       	std	Z+3, r19	; 0x03
 19c:	22 83       	std	Z+2, r18	; 0x02
 19e:	08 95       	ret

000001a0 <Sleep>:
}

/* uses 72kHz timer => Sleep(x) = x/72kHz [sec] */
void Sleep(unsigned char time72kHz)
{
	count72kHz = 0;
 1a0:	10 92 b2 00 	sts	0x00B2, r1
	while (count72kHz < time72kHz);
 1a4:	90 91 b2 00 	lds	r25, 0x00B2
 1a8:	98 17       	cp	r25, r24
 1aa:	e0 f3       	brcs	.-8      	; 0x1a4 <Sleep+0x4>
}
 1ac:	08 95       	ret

000001ae <SleepMS>:

void SleepMS (double i)
{
	i *= 72000 ;
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	30 ea       	ldi	r19, 0xA0	; 160
 1b2:	4c e8       	ldi	r20, 0x8C	; 140
 1b4:	57 e4       	ldi	r21, 0x47	; 71
 1b6:	fa d2       	rcall	.+1524   	; 0x7ac <__mulsf3>
	Sleep(i);
 1b8:	7c d2       	rcall	.+1272   	; 0x6b2 <__fixunssfsi>
 1ba:	86 2f       	mov	r24, r22
 1bc:	f1 df       	rcall	.-30     	; 0x1a0 <Sleep>
 1be:	08 95       	ret

000001c0 <setMotor>:
//----------------------------------------------------------------------------------------------------Ende main



void setMotor(char DirLeft, char DirRight, char SpeedLeft, char SpeedRight)
{
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	c4 2f       	mov	r28, r20
 1c6:	d2 2f       	mov	r29, r18
	/*usart_puts("setMotor");
	usart_putc('L');
	usart_puti((int) SpeedLeft, 3);
	usart_putc('R');
	usart_puti((int) SpeedRight, 3);*/
	MotorDir(DirLeft,DirRight);
 1c8:	62 df       	rcall	.-316    	; 0x8e <MotorDir>
	usart_puts("\r\n");
 1ca:	84 e7       	ldi	r24, 0x74	; 116
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	28 d2       	rcall	.+1104   	; 0x620 <usart_puts>
	MotorSpeed(SpeedLeft, SpeedRight);
 1d0:	6d 2f       	mov	r22, r29
 1d2:	8c 2f       	mov	r24, r28
 1d4:	55 df       	rcall	.-342    	; 0x80 <MotorSpeed>
	
	return;  
}
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <checkData>:

void checkData() {
 1dc:	cf 92       	push	r12
 1de:	df 92       	push	r13
 1e0:	ef 92       	push	r14
 1e2:	ff 92       	push	r15
	//-----------------------------------------------vorwärts
	if(ReadData[0] == 'W')
 1e4:	80 91 b3 00 	lds	r24, 0x00B3
 1e8:	87 35       	cpi	r24, 0x57	; 87
 1ea:	59 f4       	brne	.+22     	; 0x202 <checkData+0x26>
	{
		DirLeft = FWD;
 1ec:	80 e2       	ldi	r24, 0x20	; 32
 1ee:	80 93 60 00 	sts	0x0060, r24
		DirRight = FWD;
 1f2:	80 93 61 00 	sts	0x0061, r24
		BackLED(ON,ON);
 1f6:	61 e0       	ldi	r22, 0x01	; 1
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	6f df       	rcall	.-290    	; 0xda <BackLED>
		FrontLED(OFF);
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	64 df       	rcall	.-312    	; 0xc8 <FrontLED>
 200:	7e c0       	rjmp	.+252    	; 0x2fe <checkData+0x122>
		//usart_putc(ReadData[0]);
	}
	//----------------------------------------------rückwärts
	else if (ReadData[0] == 'S')
 202:	83 35       	cpi	r24, 0x53	; 83
 204:	59 f4       	brne	.+22     	; 0x21c <checkData+0x40>
	{
		DirLeft = RWD;
 206:	80 e1       	ldi	r24, 0x10	; 16
 208:	80 93 60 00 	sts	0x0060, r24
		DirRight = RWD;
 20c:	80 93 61 00 	sts	0x0061, r24
		BackLED(ON, ON);
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	62 df       	rcall	.-316    	; 0xda <BackLED>
		FrontLED(ON);
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	57 df       	rcall	.-338    	; 0xc8 <FrontLED>
 21a:	71 c0       	rjmp	.+226    	; 0x2fe <checkData+0x122>
		//usart_putc(ReadData[0]);
	}
	//-----------------------------------------------links
	else if (ReadData[0] == 'A')
 21c:	81 34       	cpi	r24, 0x41	; 65
 21e:	61 f4       	brne	.+24     	; 0x238 <checkData+0x5c>
	{
		DirLeft = FREE;
 220:	80 e3       	ldi	r24, 0x30	; 48
 222:	80 93 60 00 	sts	0x0060, r24
		DirRight = FWD;
 226:	80 e2       	ldi	r24, 0x20	; 32
 228:	80 93 61 00 	sts	0x0061, r24
		BackLED(ON,OFF);
 22c:	60 e0       	ldi	r22, 0x00	; 0
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	54 df       	rcall	.-344    	; 0xda <BackLED>
		FrontLED(OFF);
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	49 df       	rcall	.-366    	; 0xc8 <FrontLED>
 236:	63 c0       	rjmp	.+198    	; 0x2fe <checkData+0x122>
		/*usart_putc('L');
		usart_puti((int) SollSpeedLeft, 3);*/
		//usart_putc(ReadData[0]);
	}
	//-----------------------------------------------rechts
	else if (ReadData[0] == 'D')
 238:	84 34       	cpi	r24, 0x44	; 68
 23a:	61 f4       	brne	.+24     	; 0x254 <checkData+0x78>
	{
		DirLeft = FWD;
 23c:	80 e2       	ldi	r24, 0x20	; 32
 23e:	80 93 60 00 	sts	0x0060, r24
		DirRight = FREE;
 242:	80 e3       	ldi	r24, 0x30	; 48
 244:	80 93 61 00 	sts	0x0061, r24
		BackLED(OFF, ON);
 248:	61 e0       	ldi	r22, 0x01	; 1
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	46 df       	rcall	.-372    	; 0xda <BackLED>
		FrontLED(OFF);
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	3b df       	rcall	.-394    	; 0xc8 <FrontLED>
 252:	55 c0       	rjmp	.+170    	; 0x2fe <checkData+0x122>
		/*usart_putc('R');
		usart_puti((int) SollSpeedRight, 3);*/
		//usart_putc(ReadData[0]);
	}
	//-----------------------------------------------Speed
	else if (ReadData[0] == 'G')
 254:	87 34       	cpi	r24, 0x47	; 71
 256:	09 f0       	breq	.+2      	; 0x25a <checkData+0x7e>
 258:	40 c0       	rjmp	.+128    	; 0x2da <checkData+0xfe>
	{
		SollSpeedLeft  = (char) atol(ReadData +1);
 25a:	84 eb       	ldi	r24, 0xB4	; 180
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	2b d3       	rcall	.+1622   	; 0x8b6 <atol>
 260:	6b 01       	movw	r12, r22
 262:	7c 01       	movw	r14, r24
 264:	dd 24       	eor	r13, r13
 266:	ee 24       	eor	r14, r14
 268:	ff 24       	eor	r15, r15
 26a:	c0 92 66 00 	sts	0x0066, r12
 26e:	d0 92 67 00 	sts	0x0067, r13
 272:	e0 92 68 00 	sts	0x0068, r14
 276:	f0 92 69 00 	sts	0x0069, r15
		int i=1;
		while (ReadData[i] != 'Z')
 27a:	80 91 b4 00 	lds	r24, 0x00B4
 27e:	8a 35       	cpi	r24, 0x5A	; 90
 280:	49 f0       	breq	.+18     	; 0x294 <checkData+0xb8>
 282:	e5 eb       	ldi	r30, 0xB5	; 181
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
		{
			i++;
 28a:	01 96       	adiw	r24, 0x01	; 1
	//-----------------------------------------------Speed
	else if (ReadData[0] == 'G')
	{
		SollSpeedLeft  = (char) atol(ReadData +1);
		int i=1;
		while (ReadData[i] != 'Z')
 28c:	21 91       	ld	r18, Z+
 28e:	2a 35       	cpi	r18, 0x5A	; 90
 290:	e1 f7       	brne	.-8      	; 0x28a <checkData+0xae>
 292:	02 c0       	rjmp	.+4      	; 0x298 <checkData+0xbc>
	}
	//-----------------------------------------------Speed
	else if (ReadData[0] == 'G')
	{
		SollSpeedLeft  = (char) atol(ReadData +1);
		int i=1;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
		while (ReadData[i] != 'Z')
		{
			i++;
		}
		
		SollSpeedRight = (char) atol(ReadData +i+1);
 298:	8c 54       	subi	r24, 0x4C	; 76
 29a:	9f 4f       	sbci	r25, 0xFF	; 255
 29c:	0c d3       	rcall	.+1560   	; 0x8b6 <atol>
 29e:	dc 01       	movw	r26, r24
 2a0:	cb 01       	movw	r24, r22
 2a2:	99 27       	eor	r25, r25
 2a4:	aa 27       	eor	r26, r26
 2a6:	bb 27       	eor	r27, r27
 2a8:	80 93 62 00 	sts	0x0062, r24
 2ac:	90 93 63 00 	sts	0x0063, r25
 2b0:	a0 93 64 00 	sts	0x0064, r26
 2b4:	b0 93 65 00 	sts	0x0065, r27
		IstSpeedLeft = SollSpeedLeft; 
 2b8:	c0 92 aa 00 	sts	0x00AA, r12
 2bc:	d0 92 ab 00 	sts	0x00AB, r13
 2c0:	e0 92 ac 00 	sts	0x00AC, r14
 2c4:	f0 92 ad 00 	sts	0x00AD, r15
		IstSpeedRight = SollSpeedRight; 
 2c8:	80 93 a6 00 	sts	0x00A6, r24
 2cc:	90 93 a7 00 	sts	0x00A7, r25
 2d0:	a0 93 a8 00 	sts	0x00A8, r26
 2d4:	b0 93 a9 00 	sts	0x00A9, r27
 2d8:	12 c0       	rjmp	.+36     	; 0x2fe <checkData+0x122>
		usart_putc('R');
		usart_puti((int) SollSpeedRight, 3);*/

	}
	//------------------------------------------------keine Zeichen empfangen
	else if (ReadData[0] == 'X')
 2da:	88 35       	cpi	r24, 0x58	; 88
 2dc:	59 f4       	brne	.+22     	; 0x2f4 <checkData+0x118>
	{
		DirLeft = FREE;
 2de:	80 e3       	ldi	r24, 0x30	; 48
 2e0:	80 93 60 00 	sts	0x0060, r24
		DirRight = FREE;
 2e4:	80 93 61 00 	sts	0x0061, r24
		FrontLED(OFF);
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	ee de       	rcall	.-548    	; 0xc8 <FrontLED>
		BackLED(OFF, OFF);
 2ec:	60 e0       	ldi	r22, 0x00	; 0
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	f4 de       	rcall	.-536    	; 0xda <BackLED>
 2f2:	05 c0       	rjmp	.+10     	; 0x2fe <checkData+0x122>
		//StatusLED(YELLOW);
	}
	//-----------------------------------------------Handshake
	else if (ReadData[0] == 'h')
 2f4:	88 36       	cpi	r24, 0x68	; 104
 2f6:	19 f4       	brne	.+6      	; 0x2fe <checkData+0x122>
	{
		usart_puts("Handshake \r\n");
 2f8:	8a e6       	ldi	r24, 0x6A	; 106
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	91 d1       	rcall	.+802    	; 0x620 <usart_puts>
	}
}
 2fe:	ff 90       	pop	r15
 300:	ef 90       	pop	r14
 302:	df 90       	pop	r13
 304:	cf 90       	pop	r12
 306:	08 95       	ret

00000308 <readData>:

void readData(){
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
			if (usart_byte_avail_intr() == 1)
 30c:	54 d1       	rcall	.+680    	; 0x5b6 <usart_byte_avail_intr>
 30e:	81 30       	cpi	r24, 0x01	; 1
 310:	c1 f4       	brne	.+48     	; 0x342 <readData+0x3a>
			{
				ReadData[0] = (unsigned char)usart_getc_intr();
 312:	64 d1       	rcall	.+712    	; 0x5dc <usart_getc_intr>
 314:	80 93 b3 00 	sts	0x00B3, r24
				//usart_putc(ReadData[0]);
				if ((ReadData[0] == 'G') /*&& (usart_string_avail_intr() == 1)*/)
 318:	87 34       	cpi	r24, 0x47	; 71
 31a:	99 f4       	brne	.+38     	; 0x342 <readData+0x3a>
				{
					StatusLED(OFF);
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	c0 de       	rcall	.-640    	; 0xa0 <StatusLED>
					//usart_puts(" IF_G \r\n");
					//usart_putc(ReadData[0]);
					int i=1;
					while (ReadData[i] != 'E' && usart_byte_avail_intr() == 1)
 320:	80 91 b4 00 	lds	r24, 0x00B4
 324:	85 34       	cpi	r24, 0x45	; 69
 326:	69 f0       	breq	.+26     	; 0x342 <readData+0x3a>
 328:	c4 eb       	ldi	r28, 0xB4	; 180
 32a:	d0 e0       	ldi	r29, 0x00	; 0
 32c:	07 c0       	rjmp	.+14     	; 0x33c <readData+0x34>
					{
						ReadData[i]=usart_getc_intr();
 32e:	56 d1       	rcall	.+684    	; 0x5dc <usart_getc_intr>
 330:	89 93       	st	Y+, r24
						//usart_putc(ReadData[i]);
						i++;
						StatusLED(GREEN);
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	b5 de       	rcall	.-662    	; 0xa0 <StatusLED>
				{
					StatusLED(OFF);
					//usart_puts(" IF_G \r\n");
					//usart_putc(ReadData[0]);
					int i=1;
					while (ReadData[i] != 'E' && usart_byte_avail_intr() == 1)
 336:	88 81       	ld	r24, Y
 338:	85 34       	cpi	r24, 0x45	; 69
 33a:	19 f0       	breq	.+6      	; 0x342 <readData+0x3a>
 33c:	3c d1       	rcall	.+632    	; 0x5b6 <usart_byte_avail_intr>
 33e:	81 30       	cpi	r24, 0x01	; 1
 340:	b1 f3       	breq	.-20     	; 0x32e <readData+0x26>
					
					//usart_putc('N');
				}
				//usart_puts("Asuro: " + ReadData[0]);
			}
}
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <readOdometrie>:

void readOdometrie(uint8_t side,uint8_t *flag, uint8_t *rpm, unsigned int brightness[]){
 348:	1f 93       	push	r17
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	18 2f       	mov	r17, r24
 350:	e9 01       	movw	r28, r18
	
	OdometrieData(brightness); 
 352:	c9 01       	movw	r24, r18
 354:	01 df       	rcall	.-510    	; 0x158 <OdometrieData>
	usart_puts("OdData");
 356:	87 e7       	ldi	r24, 0x77	; 119
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	62 d1       	rcall	.+708    	; 0x620 <usart_puts>
	if (side == LEFT){
 35c:	11 11       	cpse	r17, r1
 35e:	16 c0       	rjmp	.+44     	; 0x38c <readOdometrie+0x44>
		usart_puti((int) brightness[LEFT], 3);
 360:	63 e0       	ldi	r22, 0x03	; 3
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	88 81       	ld	r24, Y
 366:	99 81       	ldd	r25, Y+1	; 0x01
 368:	69 d1       	rcall	.+722    	; 0x63c <usart_puti>

		if ((brightness[LEFT] < 600) /*&& (flag == TRUE)*/) {
 36a:	88 81       	ld	r24, Y
 36c:	99 81       	ldd	r25, Y+1	; 0x01
 36e:	88 35       	cpi	r24, 0x58	; 88
 370:	22 e0       	ldi	r18, 0x02	; 2
 372:	92 07       	cpc	r25, r18
 374:	20 f4       	brcc	.+8      	; 0x37e <readOdometrie+0x36>
			usart_puts("WHITE\r\n");
 376:	8e e7       	ldi	r24, 0x7E	; 126
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	52 d1       	rcall	.+676    	; 0x620 <usart_puts>
 37c:	1e c0       	rjmp	.+60     	; 0x3ba <readOdometrie+0x72>
			flag = FALSE; 
			rpm++;
		
		}
	
		else if ((brightness[LEFT] > 650) /*&& (flag == FALSE)*/) {
 37e:	8b 38       	cpi	r24, 0x8B	; 139
 380:	92 40       	sbci	r25, 0x02	; 2
 382:	d8 f0       	brcs	.+54     	; 0x3ba <readOdometrie+0x72>
			usart_puts("BLACK\r\n");
 384:	86 e8       	ldi	r24, 0x86	; 134
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	4b d1       	rcall	.+662    	; 0x620 <usart_puts>
 38a:	17 c0       	rjmp	.+46     	; 0x3ba <readOdometrie+0x72>
			flag = TRUE; 
			rpm++;
		
		}
	}
	if (side == RIGHT){
 38c:	11 30       	cpi	r17, 0x01	; 1
 38e:	a9 f4       	brne	.+42     	; 0x3ba <readOdometrie+0x72>
		usart_puti((int) brightness[RIGHT], 3);
 390:	63 e0       	ldi	r22, 0x03	; 3
 392:	70 e0       	ldi	r23, 0x00	; 0
 394:	8a 81       	ldd	r24, Y+2	; 0x02
 396:	9b 81       	ldd	r25, Y+3	; 0x03
 398:	51 d1       	rcall	.+674    	; 0x63c <usart_puti>
			if ((brightness[RIGHT] < 600) /*&& (flag == TRUE)*/) {
 39a:	8a 81       	ldd	r24, Y+2	; 0x02
 39c:	9b 81       	ldd	r25, Y+3	; 0x03
 39e:	88 35       	cpi	r24, 0x58	; 88
 3a0:	22 e0       	ldi	r18, 0x02	; 2
 3a2:	92 07       	cpc	r25, r18
 3a4:	20 f4       	brcc	.+8      	; 0x3ae <readOdometrie+0x66>
			usart_puts("WHITE\r\n");
 3a6:	8e e7       	ldi	r24, 0x7E	; 126
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	3a d1       	rcall	.+628    	; 0x620 <usart_puts>
 3ac:	06 c0       	rjmp	.+12     	; 0x3ba <readOdometrie+0x72>
			flag = FALSE;
			rpm++;
			
		}
		
		else if ((brightness[RIGHT] > 650) /*&& (flag == FALSE)*/) {
 3ae:	8b 38       	cpi	r24, 0x8B	; 139
 3b0:	92 40       	sbci	r25, 0x02	; 2
 3b2:	18 f0       	brcs	.+6      	; 0x3ba <readOdometrie+0x72>
			usart_puts("BLACK\r\n");
 3b4:	86 e8       	ldi	r24, 0x86	; 134
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	33 d1       	rcall	.+614    	; 0x620 <usart_puts>
			flag = TRUE;
			rpm++;
			
		}
	}
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	1f 91       	pop	r17
 3c0:	08 95       	ret

000003c2 <main>:
void readData(); 
void readOdometrie(uint8_t side, uint8_t *flag, uint8_t *rpm, unsigned int brightness[]);


int main(void)
{
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	00 d0       	rcall	.+0      	; 0x3c8 <main+0x6>
 3c8:	00 d0       	rcall	.+0      	; 0x3ca <main+0x8>
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
	Init(); 
 3ce:	9f de       	rcall	.-706    	; 0x10e <Init>

	usart_init_intr(9600);
 3d0:	80 e8       	ldi	r24, 0x80	; 128
 3d2:	95 e2       	ldi	r25, 0x25	; 37
 3d4:	93 d0       	rcall	.+294    	; 0x4fc <usart_init_intr>
			IstSpeedLeft = 100; 
		}
		if (IstSpeedRight < 100){
			IstSpeedRight =100; 
		}
		setMotor(DirLeft, DirRight, IstSpeedLeft, IstSpeedRight);
 3d6:	0f 2e       	mov	r0, r31
 3d8:	f6 ea       	ldi	r31, 0xA6	; 166
 3da:	ef 2e       	mov	r14, r31
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	ff 2e       	mov	r15, r31
 3e0:	f0 2d       	mov	r31, r0
 3e2:	0a ea       	ldi	r16, 0xAA	; 170
 3e4:	10 e0       	ldi	r17, 0x00	; 0
			rpmLeft = 0; 
			rpmRight = 0;  
		}		
//-----------------------------------------------------------------Minimaldrehzahl
		if (IstSpeedLeft < 100) {
			IstSpeedLeft = 100; 
 3e6:	0f 2e       	mov	r0, r31
 3e8:	f4 e6       	ldi	r31, 0x64	; 100
 3ea:	8f 2e       	mov	r8, r31
 3ec:	91 2c       	mov	r9, r1
 3ee:	a1 2c       	mov	r10, r1
 3f0:	b1 2c       	mov	r11, r1
 3f2:	f0 2d       	mov	r31, r0
	
	
    while(1)
    {
//-----------------------------------------------------------------Einlesen
		readData(); 
 3f4:	89 df       	rcall	.-238    	; 0x308 <readData>
//-----------------------------------------------------------------WASD Steuerung
		checkData(); 
 3f6:	f2 de       	rcall	.-540    	; 0x1dc <checkData>
//-----------------------------------------------------------------Regelung
		readOdometrie(LEFT, flagLeft, rpmLeft, brightnessdata); 
 3f8:	9e 01       	movw	r18, r28
 3fa:	2f 5f       	subi	r18, 0xFF	; 255
 3fc:	3f 4f       	sbci	r19, 0xFF	; 255
 3fe:	40 e0       	ldi	r20, 0x00	; 0
 400:	50 e0       	ldi	r21, 0x00	; 0
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	70 e0       	ldi	r23, 0x00	; 0
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	9f df       	rcall	.-194    	; 0x348 <readOdometrie>
		readOdometrie(RIGHT, flagRight, rpmRight, brightnessdata); 
 40a:	9e 01       	movw	r18, r28
 40c:	2f 5f       	subi	r18, 0xFF	; 255
 40e:	3f 4f       	sbci	r19, 0xFF	; 255
 410:	40 e0       	ldi	r20, 0x00	; 0
 412:	50 e0       	ldi	r21, 0x00	; 0
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	96 df       	rcall	.-212    	; 0x348 <readOdometrie>
		
		rpmdif = rpmLeft - rpmRight; 
		rpmout = (int) rpmdif; 
		usart_puts("RPM");
 41c:	8e e8       	ldi	r24, 0x8E	; 142
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	ff d0       	rcall	.+510    	; 0x620 <usart_puts>
		usart_puti((int) rpmout, 3);
 422:	63 e0       	ldi	r22, 0x03	; 3
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	08 d1       	rcall	.+528    	; 0x63c <usart_puti>
		usart_puts("\r\n");
 42c:	84 e7       	ldi	r24, 0x74	; 116
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	f7 d0       	rcall	.+494    	; 0x620 <usart_puts>
			usart_puts("RpmDif<2");
			usart_puts("\r\n");
			IstSpeedRight--; 
		}
		else{
			usart_puts("RpmDif=0");
 432:	82 e9       	ldi	r24, 0x92	; 146
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	f4 d0       	rcall	.+488    	; 0x620 <usart_puts>
			usart_puts("\r\n");
 438:	84 e7       	ldi	r24, 0x74	; 116
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	f1 d0       	rcall	.+482    	; 0x620 <usart_puts>
			IstSpeedLeft = SollSpeedLeft; 
 43e:	40 91 66 00 	lds	r20, 0x0066
 442:	50 91 67 00 	lds	r21, 0x0067
 446:	60 91 68 00 	lds	r22, 0x0068
 44a:	70 91 69 00 	lds	r23, 0x0069
 44e:	40 93 aa 00 	sts	0x00AA, r20
 452:	50 93 ab 00 	sts	0x00AB, r21
 456:	60 93 ac 00 	sts	0x00AC, r22
 45a:	70 93 ad 00 	sts	0x00AD, r23
			IstSpeedRight = SollSpeedRight;
 45e:	80 91 62 00 	lds	r24, 0x0062
 462:	90 91 63 00 	lds	r25, 0x0063
 466:	a0 91 64 00 	lds	r26, 0x0064
 46a:	b0 91 65 00 	lds	r27, 0x0065
 46e:	80 93 a6 00 	sts	0x00A6, r24
 472:	90 93 a7 00 	sts	0x00A7, r25
 476:	a0 93 a8 00 	sts	0x00A8, r26
 47a:	b0 93 a9 00 	sts	0x00A9, r27
			rpmLeft = 0; 
			rpmRight = 0;  
		}		
//-----------------------------------------------------------------Minimaldrehzahl
		if (IstSpeedLeft < 100) {
 47e:	44 36       	cpi	r20, 0x64	; 100
 480:	51 05       	cpc	r21, r1
 482:	61 05       	cpc	r22, r1
 484:	71 05       	cpc	r23, r1
 486:	40 f4       	brcc	.+16     	; 0x498 <__stack+0x39>
			IstSpeedLeft = 100; 
 488:	80 92 aa 00 	sts	0x00AA, r8
 48c:	90 92 ab 00 	sts	0x00AB, r9
 490:	a0 92 ac 00 	sts	0x00AC, r10
 494:	b0 92 ad 00 	sts	0x00AD, r11
		}
		if (IstSpeedRight < 100){
 498:	84 36       	cpi	r24, 0x64	; 100
 49a:	91 05       	cpc	r25, r1
 49c:	a1 05       	cpc	r26, r1
 49e:	b1 05       	cpc	r27, r1
 4a0:	40 f4       	brcc	.+16     	; 0x4b2 <__stack+0x53>
			IstSpeedRight =100; 
 4a2:	80 92 a6 00 	sts	0x00A6, r8
 4a6:	90 92 a7 00 	sts	0x00A7, r9
 4aa:	a0 92 a8 00 	sts	0x00A8, r10
 4ae:	b0 92 a9 00 	sts	0x00A9, r11
		}
		setMotor(DirLeft, DirRight, IstSpeedLeft, IstSpeedRight);
 4b2:	f7 01       	movw	r30, r14
 4b4:	20 81       	ld	r18, Z
 4b6:	f8 01       	movw	r30, r16
 4b8:	40 81       	ld	r20, Z
 4ba:	60 91 61 00 	lds	r22, 0x0061
 4be:	80 91 60 00 	lds	r24, 0x0060
 4c2:	7e de       	rcall	.-772    	; 0x1c0 <setMotor>
		
//---------------------------------------------------------Handshake 
		if (handshake == 1)
 4c4:	80 91 ae 00 	lds	r24, 0x00AE
 4c8:	90 91 af 00 	lds	r25, 0x00AF
 4cc:	a0 91 b0 00 	lds	r26, 0x00B0
 4d0:	b0 91 b1 00 	lds	r27, 0x00B1
 4d4:	01 97       	sbiw	r24, 0x01	; 1
 4d6:	a1 05       	cpc	r26, r1
 4d8:	b1 05       	cpc	r27, r1
 4da:	09 f0       	breq	.+2      	; 0x4de <__stack+0x7f>
 4dc:	8b cf       	rjmp	.-234    	; 0x3f4 <main+0x32>
		{
			usart_puts("Handshake ");
 4de:	8b e9       	ldi	r24, 0x9B	; 155
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	9e d0       	rcall	.+316    	; 0x620 <usart_puts>
			usart_puts("\r\n");
 4e4:	84 e7       	ldi	r24, 0x74	; 116
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	9b d0       	rcall	.+310    	; 0x620 <usart_puts>
			handshake = 0;  
 4ea:	10 92 ae 00 	sts	0x00AE, r1
 4ee:	10 92 af 00 	sts	0x00AF, r1
 4f2:	10 92 b0 00 	sts	0x00B0, r1
 4f6:	10 92 b1 00 	sts	0x00B1, r1
 4fa:	7c cf       	rjmp	.-264    	; 0x3f4 <main+0x32>

000004fc <usart_init_intr>:

//=======================================================================
//Serielle Schnittstelle mit 8 Bit, no parity, 1 Stoppbit  initialisieren
//Den Datenempfang erledigt eine Interrupt-Service-Routine.
//=======================================================================
void usart_init_intr(uint16_t baud){
 4fc:	9c 01       	movw	r18, r24
	const uint32_t fosz=8000000L;
	uint16_t baud_wert;

	lesezeiger=puffer;
 4fe:	86 ec       	ldi	r24, 0xC6	; 198
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	90 93 c5 00 	sts	0x00C5, r25
 506:	80 93 c4 00 	sts	0x00C4, r24
	schreibzeiger=puffer;
 50a:	90 93 c3 00 	sts	0x00C3, r25
 50e:	80 93 c2 00 	sts	0x00C2, r24



	//Baudrate einstellen
	baud_wert=fosz/(baud*16L)-1;
 512:	c9 01       	movw	r24, r18
 514:	a0 e0       	ldi	r26, 0x00	; 0
 516:	b0 e0       	ldi	r27, 0x00	; 0
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	aa 1f       	adc	r26, r26
 51e:	bb 1f       	adc	r27, r27
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	aa 1f       	adc	r26, r26
 526:	bb 1f       	adc	r27, r27
 528:	9c 01       	movw	r18, r24
 52a:	ad 01       	movw	r20, r26
 52c:	22 0f       	add	r18, r18
 52e:	33 1f       	adc	r19, r19
 530:	44 1f       	adc	r20, r20
 532:	55 1f       	adc	r21, r21
 534:	22 0f       	add	r18, r18
 536:	33 1f       	adc	r19, r19
 538:	44 1f       	adc	r20, r20
 53a:	55 1f       	adc	r21, r21
 53c:	60 e0       	ldi	r22, 0x00	; 0
 53e:	72 e1       	ldi	r23, 0x12	; 18
 540:	8a e7       	ldi	r24, 0x7A	; 122
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	96 d1       	rcall	.+812    	; 0x872 <__udivmodsi4>
 546:	21 50       	subi	r18, 0x01	; 1
 548:	31 09       	sbc	r19, r1
	UBRRH=(uint8_t)(baud_wert>>8);
 54a:	30 bd       	out	0x20, r19	; 32
	UBRRL=(uint8_t)baud_wert;
 54c:	29 b9       	out	0x09, r18	; 9

	//8N1 Daten
	UCSRC|=(1<<URSEL)|(3<<UCSZ0);
 54e:	80 b5       	in	r24, 0x20	; 32
 550:	86 68       	ori	r24, 0x86	; 134
 552:	80 bd       	out	0x20, r24	; 32
	//Empfangen und Senden und Empfangsinterrupt aktivieren
	UCSRB=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
 554:	88 e9       	ldi	r24, 0x98	; 152
 556:	8a b9       	out	0x0a, r24	; 10
 558:	08 95       	ret

0000055a <__vector_11>:
}

//=============================================================
// Interrupt-Service-Routine
//=============================================================
ISR (USART_RXC_vect){
 55a:	1f 92       	push	r1
 55c:	0f 92       	push	r0
 55e:	0f b6       	in	r0, 0x3f	; 63
 560:	0f 92       	push	r0
 562:	11 24       	eor	r1, r1
 564:	2f 93       	push	r18
 566:	8f 93       	push	r24
 568:	9f 93       	push	r25
 56a:	ef 93       	push	r30
 56c:	ff 93       	push	r31

	//Automatisch empfangene Daten in den Puffer schreiben:

	*schreibzeiger=UDR;
 56e:	e0 91 c2 00 	lds	r30, 0x00C2
 572:	f0 91 c3 00 	lds	r31, 0x00C3
 576:	8c b1       	in	r24, 0x0c	; 12
 578:	80 83       	st	Z, r24
	schreibzeiger++;
 57a:	80 91 c2 00 	lds	r24, 0x00C2
 57e:	90 91 c3 00 	lds	r25, 0x00C3
 582:	01 96       	adiw	r24, 0x01	; 1
	if(schreibzeiger==puffer+PUFFER_GROESSE) 
 584:	21 e0       	ldi	r18, 0x01	; 1
 586:	86 34       	cpi	r24, 0x46	; 70
 588:	92 07       	cpc	r25, r18
 58a:	29 f0       	breq	.+10     	; 0x596 <__vector_11+0x3c>
ISR (USART_RXC_vect){

	//Automatisch empfangene Daten in den Puffer schreiben:

	*schreibzeiger=UDR;
	schreibzeiger++;
 58c:	90 93 c3 00 	sts	0x00C3, r25
 590:	80 93 c2 00 	sts	0x00C2, r24
 594:	06 c0       	rjmp	.+12     	; 0x5a2 <__vector_11+0x48>
	if(schreibzeiger==puffer+PUFFER_GROESSE) 
	schreibzeiger=puffer;
 596:	86 ec       	ldi	r24, 0xC6	; 198
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	90 93 c3 00 	sts	0x00C3, r25
 59e:	80 93 c2 00 	sts	0x00C2, r24

}
 5a2:	ff 91       	pop	r31
 5a4:	ef 91       	pop	r30
 5a6:	9f 91       	pop	r25
 5a8:	8f 91       	pop	r24
 5aa:	2f 91       	pop	r18
 5ac:	0f 90       	pop	r0
 5ae:	0f be       	out	0x3f, r0	; 63
 5b0:	0f 90       	pop	r0
 5b2:	1f 90       	pop	r1
 5b4:	18 95       	reti

000005b6 <usart_byte_avail_intr>:
//Funktionen für den interrupt-gesteuerten Datenempfang
//=============================================================
uint8_t usart_byte_avail_intr(void){
	//Prüft, ob ein Datenbyte im Puffer vorhanden ist
	// 1 = vorhanden, 0 = nicht vorhanden
	SleepMS(10); 
 5b6:	60 e0       	ldi	r22, 0x00	; 0
 5b8:	70 e0       	ldi	r23, 0x00	; 0
 5ba:	80 e2       	ldi	r24, 0x20	; 32
 5bc:	91 e4       	ldi	r25, 0x41	; 65
 5be:	f7 dd       	rcall	.-1042   	; 0x1ae <SleepMS>
	if(schreibzeiger!=lesezeiger)
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	40 91 c2 00 	lds	r20, 0x00C2
 5c6:	50 91 c3 00 	lds	r21, 0x00C3
 5ca:	20 91 c4 00 	lds	r18, 0x00C4
 5ce:	30 91 c5 00 	lds	r19, 0x00C5
 5d2:	42 17       	cp	r20, r18
 5d4:	53 07       	cpc	r21, r19
 5d6:	09 f4       	brne	.+2      	; 0x5da <usart_byte_avail_intr+0x24>
 5d8:	80 e0       	ldi	r24, 0x00	; 0
	return 1;
	else return 0;
}
 5da:	08 95       	ret

000005dc <usart_getc_intr>:
	//Liest ein Byte aus dem Puffer
	//Nur aufrufen, wenn usart_byte_avail_intr() vorher aufgerufen wurde und
	//eine 1 lieferte.
	uint8_t datenbyte=0;

	if(schreibzeiger!=lesezeiger){
 5dc:	e0 91 c4 00 	lds	r30, 0x00C4
 5e0:	f0 91 c5 00 	lds	r31, 0x00C5
 5e4:	80 91 c2 00 	lds	r24, 0x00C2
 5e8:	90 91 c3 00 	lds	r25, 0x00C3
 5ec:	8e 17       	cp	r24, r30
 5ee:	9f 07       	cpc	r25, r31
 5f0:	89 f0       	breq	.+34     	; 0x614 <usart_getc_intr+0x38>

		datenbyte=*lesezeiger;
 5f2:	81 91       	ld	r24, Z+
		lesezeiger++;
		if(lesezeiger==puffer+PUFFER_GROESSE) lesezeiger=puffer;
 5f4:	91 e0       	ldi	r25, 0x01	; 1
 5f6:	e6 34       	cpi	r30, 0x46	; 70
 5f8:	f9 07       	cpc	r31, r25
 5fa:	29 f0       	breq	.+10     	; 0x606 <usart_getc_intr+0x2a>
	uint8_t datenbyte=0;

	if(schreibzeiger!=lesezeiger){

		datenbyte=*lesezeiger;
		lesezeiger++;
 5fc:	f0 93 c5 00 	sts	0x00C5, r31
 600:	e0 93 c4 00 	sts	0x00C4, r30
 604:	08 95       	ret
		if(lesezeiger==puffer+PUFFER_GROESSE) lesezeiger=puffer;
 606:	26 ec       	ldi	r18, 0xC6	; 198
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	30 93 c5 00 	sts	0x00C5, r19
 60e:	20 93 c4 00 	sts	0x00C4, r18
 612:	08 95       	ret
//--------------------------------------------------------------
uint8_t usart_getc_intr(void){
	//Liest ein Byte aus dem Puffer
	//Nur aufrufen, wenn usart_byte_avail_intr() vorher aufgerufen wurde und
	//eine 1 lieferte.
	uint8_t datenbyte=0;
 614:	80 e0       	ldi	r24, 0x00	; 0
		lesezeiger++;
		if(lesezeiger==puffer+PUFFER_GROESSE) lesezeiger=puffer;
		
	}
	return datenbyte;
}
 616:	08 95       	ret

00000618 <usart_putc>:
//=============================================================
//Die nachfolgenden Sendefunktionen sind nicht interrupt-gesteuert
//=============================================================
void usart_putc(uint8_t byte){
	//Ein Byte senden
	while(!(UCSRA&(1<<UDRE)));//warten auf Datenregister empty
 618:	5d 9b       	sbis	0x0b, 5	; 11
 61a:	fe cf       	rjmp	.-4      	; 0x618 <usart_putc>
	UDR=byte;
 61c:	8c b9       	out	0x0c, r24	; 12
 61e:	08 95       	ret

00000620 <usart_puts>:
}
//--------------------------------------------------------------
void usart_puts(char *s)
//Einen String mit Endmarke 0 senden
{
 620:	cf 93       	push	r28
 622:	df 93       	push	r29
 624:	ec 01       	movw	r28, r24

	while (*s != 0) {
 626:	88 81       	ld	r24, Y
 628:	88 23       	and	r24, r24
 62a:	29 f0       	breq	.+10     	; 0x636 <usart_puts+0x16>
 62c:	21 96       	adiw	r28, 0x01	; 1
		usart_putc(*s);
 62e:	f4 df       	rcall	.-24     	; 0x618 <usart_putc>
//--------------------------------------------------------------
void usart_puts(char *s)
//Einen String mit Endmarke 0 senden
{

	while (*s != 0) {
 630:	89 91       	ld	r24, Y+
 632:	81 11       	cpse	r24, r1
 634:	fc cf       	rjmp	.-8      	; 0x62e <usart_puts+0xe>
		usart_putc(*s);
		s++;
	}
	//usart_putc(0); //Endmarke 0 wird übertragen!
}
 636:	df 91       	pop	r29
 638:	cf 91       	pop	r28
 63a:	08 95       	ret

0000063c <usart_puti>:
		s++; 
	}
	//usart_putc(0); //Endmarke 0 wird übertragen!
}
//---------------------------------------------------------------
void usart_puti(int zahl, int sges){
 63c:	ef 92       	push	r14
 63e:	ff 92       	push	r15
 640:	1f 93       	push	r17
 642:	cf 93       	push	r28
 644:	df 93       	push	r29
 646:	cd b7       	in	r28, 0x3d	; 61
 648:	de b7       	in	r29, 0x3e	; 62
 64a:	60 97       	sbiw	r28, 0x10	; 16
 64c:	0f b6       	in	r0, 0x3f	; 63
 64e:	f8 94       	cli
 650:	de bf       	out	0x3e, r29	; 62
 652:	0f be       	out	0x3f, r0	; 63
 654:	cd bf       	out	0x3d, r28	; 61
 656:	7b 01       	movw	r14, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 658:	4a e0       	ldi	r20, 0x0A	; 10
 65a:	be 01       	movw	r22, r28
 65c:	6f 5f       	subi	r22, 0xFF	; 255
 65e:	7f 4f       	sbci	r23, 0xFF	; 255
 660:	50 d1       	rcall	.+672    	; 0x902 <__itoa_ncheck>
	//als Zeichenkette
	char buffer[16];
	uint8_t l=0,n;
	char *z=buffer;
	itoa(zahl,buffer,10);
	while(*z!=0){l++; z++;}//Bufferlänge l
 662:	89 81       	ldd	r24, Y+1	; 0x01
 664:	88 23       	and	r24, r24
 666:	41 f0       	breq	.+16     	; 0x678 <usart_puti+0x3c>
 668:	fe 01       	movw	r30, r28
 66a:	32 96       	adiw	r30, 0x02	; 2
 66c:	10 e0       	ldi	r17, 0x00	; 0
 66e:	1f 5f       	subi	r17, 0xFF	; 255
 670:	81 91       	ld	r24, Z+
 672:	81 11       	cpse	r24, r1
 674:	fc cf       	rjmp	.-8      	; 0x66e <usart_puti+0x32>
 676:	01 c0       	rjmp	.+2      	; 0x67a <usart_puti+0x3e>
//---------------------------------------------------------------
void usart_puti(int zahl, int sges){
	//Senden der Integerzahl zahl als Zeichenkette formatiert  mit sges Stellen
	//als Zeichenkette
	char buffer[16];
	uint8_t l=0,n;
 678:	10 e0       	ldi	r17, 0x00	; 0
	char *z=buffer;
	itoa(zahl,buffer,10);
	while(*z!=0){l++; z++;}//Bufferlänge l
	for(n=l;n<sges;n++) usart_putc(' ');
 67a:	81 2f       	mov	r24, r17
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	8e 15       	cp	r24, r14
 680:	9f 05       	cpc	r25, r15
 682:	44 f4       	brge	.+16     	; 0x694 <usart_puti+0x58>
 684:	80 e2       	ldi	r24, 0x20	; 32
 686:	c8 df       	rcall	.-112    	; 0x618 <usart_putc>
 688:	1f 5f       	subi	r17, 0xFF	; 255
 68a:	81 2f       	mov	r24, r17
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	8e 15       	cp	r24, r14
 690:	9f 05       	cpc	r25, r15
 692:	c4 f3       	brlt	.-16     	; 0x684 <usart_puti+0x48>
	usart_puts(buffer);
 694:	ce 01       	movw	r24, r28
 696:	01 96       	adiw	r24, 0x01	; 1
 698:	c3 df       	rcall	.-122    	; 0x620 <usart_puts>
}
 69a:	60 96       	adiw	r28, 0x10	; 16
 69c:	0f b6       	in	r0, 0x3f	; 63
 69e:	f8 94       	cli
 6a0:	de bf       	out	0x3e, r29	; 62
 6a2:	0f be       	out	0x3f, r0	; 63
 6a4:	cd bf       	out	0x3d, r28	; 61
 6a6:	df 91       	pop	r29
 6a8:	cf 91       	pop	r28
 6aa:	1f 91       	pop	r17
 6ac:	ff 90       	pop	r15
 6ae:	ef 90       	pop	r14
 6b0:	08 95       	ret

000006b2 <__fixunssfsi>:
 6b2:	5b d0       	rcall	.+182    	; 0x76a <__fp_splitA>
 6b4:	88 f0       	brcs	.+34     	; 0x6d8 <__fixunssfsi+0x26>
 6b6:	9f 57       	subi	r25, 0x7F	; 127
 6b8:	90 f0       	brcs	.+36     	; 0x6de <__fixunssfsi+0x2c>
 6ba:	b9 2f       	mov	r27, r25
 6bc:	99 27       	eor	r25, r25
 6be:	b7 51       	subi	r27, 0x17	; 23
 6c0:	a0 f0       	brcs	.+40     	; 0x6ea <__fixunssfsi+0x38>
 6c2:	d1 f0       	breq	.+52     	; 0x6f8 <__fixunssfsi+0x46>
 6c4:	66 0f       	add	r22, r22
 6c6:	77 1f       	adc	r23, r23
 6c8:	88 1f       	adc	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	1a f0       	brmi	.+6      	; 0x6d4 <__fixunssfsi+0x22>
 6ce:	ba 95       	dec	r27
 6d0:	c9 f7       	brne	.-14     	; 0x6c4 <__fixunssfsi+0x12>
 6d2:	12 c0       	rjmp	.+36     	; 0x6f8 <__fixunssfsi+0x46>
 6d4:	b1 30       	cpi	r27, 0x01	; 1
 6d6:	81 f0       	breq	.+32     	; 0x6f8 <__fixunssfsi+0x46>
 6d8:	62 d0       	rcall	.+196    	; 0x79e <__fp_zero>
 6da:	b1 e0       	ldi	r27, 0x01	; 1
 6dc:	08 95       	ret
 6de:	5f c0       	rjmp	.+190    	; 0x79e <__fp_zero>
 6e0:	67 2f       	mov	r22, r23
 6e2:	78 2f       	mov	r23, r24
 6e4:	88 27       	eor	r24, r24
 6e6:	b8 5f       	subi	r27, 0xF8	; 248
 6e8:	39 f0       	breq	.+14     	; 0x6f8 <__fixunssfsi+0x46>
 6ea:	b9 3f       	cpi	r27, 0xF9	; 249
 6ec:	cc f3       	brlt	.-14     	; 0x6e0 <__fixunssfsi+0x2e>
 6ee:	86 95       	lsr	r24
 6f0:	77 95       	ror	r23
 6f2:	67 95       	ror	r22
 6f4:	b3 95       	inc	r27
 6f6:	d9 f7       	brne	.-10     	; 0x6ee <__fixunssfsi+0x3c>
 6f8:	3e f4       	brtc	.+14     	; 0x708 <__fixunssfsi+0x56>
 6fa:	90 95       	com	r25
 6fc:	80 95       	com	r24
 6fe:	70 95       	com	r23
 700:	61 95       	neg	r22
 702:	7f 4f       	sbci	r23, 0xFF	; 255
 704:	8f 4f       	sbci	r24, 0xFF	; 255
 706:	9f 4f       	sbci	r25, 0xFF	; 255
 708:	08 95       	ret

0000070a <__fp_inf>:
 70a:	97 f9       	bld	r25, 7
 70c:	9f 67       	ori	r25, 0x7F	; 127
 70e:	80 e8       	ldi	r24, 0x80	; 128
 710:	70 e0       	ldi	r23, 0x00	; 0
 712:	60 e0       	ldi	r22, 0x00	; 0
 714:	08 95       	ret

00000716 <__fp_nan>:
 716:	9f ef       	ldi	r25, 0xFF	; 255
 718:	80 ec       	ldi	r24, 0xC0	; 192
 71a:	08 95       	ret

0000071c <__fp_pscA>:
 71c:	00 24       	eor	r0, r0
 71e:	0a 94       	dec	r0
 720:	16 16       	cp	r1, r22
 722:	17 06       	cpc	r1, r23
 724:	18 06       	cpc	r1, r24
 726:	09 06       	cpc	r0, r25
 728:	08 95       	ret

0000072a <__fp_pscB>:
 72a:	00 24       	eor	r0, r0
 72c:	0a 94       	dec	r0
 72e:	12 16       	cp	r1, r18
 730:	13 06       	cpc	r1, r19
 732:	14 06       	cpc	r1, r20
 734:	05 06       	cpc	r0, r21
 736:	08 95       	ret

00000738 <__fp_round>:
 738:	09 2e       	mov	r0, r25
 73a:	03 94       	inc	r0
 73c:	00 0c       	add	r0, r0
 73e:	11 f4       	brne	.+4      	; 0x744 <__fp_round+0xc>
 740:	88 23       	and	r24, r24
 742:	52 f0       	brmi	.+20     	; 0x758 <__fp_round+0x20>
 744:	bb 0f       	add	r27, r27
 746:	40 f4       	brcc	.+16     	; 0x758 <__fp_round+0x20>
 748:	bf 2b       	or	r27, r31
 74a:	11 f4       	brne	.+4      	; 0x750 <__fp_round+0x18>
 74c:	60 ff       	sbrs	r22, 0
 74e:	04 c0       	rjmp	.+8      	; 0x758 <__fp_round+0x20>
 750:	6f 5f       	subi	r22, 0xFF	; 255
 752:	7f 4f       	sbci	r23, 0xFF	; 255
 754:	8f 4f       	sbci	r24, 0xFF	; 255
 756:	9f 4f       	sbci	r25, 0xFF	; 255
 758:	08 95       	ret

0000075a <__fp_split3>:
 75a:	57 fd       	sbrc	r21, 7
 75c:	90 58       	subi	r25, 0x80	; 128
 75e:	44 0f       	add	r20, r20
 760:	55 1f       	adc	r21, r21
 762:	59 f0       	breq	.+22     	; 0x77a <__fp_splitA+0x10>
 764:	5f 3f       	cpi	r21, 0xFF	; 255
 766:	71 f0       	breq	.+28     	; 0x784 <__fp_splitA+0x1a>
 768:	47 95       	ror	r20

0000076a <__fp_splitA>:
 76a:	88 0f       	add	r24, r24
 76c:	97 fb       	bst	r25, 7
 76e:	99 1f       	adc	r25, r25
 770:	61 f0       	breq	.+24     	; 0x78a <__fp_splitA+0x20>
 772:	9f 3f       	cpi	r25, 0xFF	; 255
 774:	79 f0       	breq	.+30     	; 0x794 <__fp_splitA+0x2a>
 776:	87 95       	ror	r24
 778:	08 95       	ret
 77a:	12 16       	cp	r1, r18
 77c:	13 06       	cpc	r1, r19
 77e:	14 06       	cpc	r1, r20
 780:	55 1f       	adc	r21, r21
 782:	f2 cf       	rjmp	.-28     	; 0x768 <__fp_split3+0xe>
 784:	46 95       	lsr	r20
 786:	f1 df       	rcall	.-30     	; 0x76a <__fp_splitA>
 788:	08 c0       	rjmp	.+16     	; 0x79a <__fp_splitA+0x30>
 78a:	16 16       	cp	r1, r22
 78c:	17 06       	cpc	r1, r23
 78e:	18 06       	cpc	r1, r24
 790:	99 1f       	adc	r25, r25
 792:	f1 cf       	rjmp	.-30     	; 0x776 <__fp_splitA+0xc>
 794:	86 95       	lsr	r24
 796:	71 05       	cpc	r23, r1
 798:	61 05       	cpc	r22, r1
 79a:	08 94       	sec
 79c:	08 95       	ret

0000079e <__fp_zero>:
 79e:	e8 94       	clt

000007a0 <__fp_szero>:
 7a0:	bb 27       	eor	r27, r27
 7a2:	66 27       	eor	r22, r22
 7a4:	77 27       	eor	r23, r23
 7a6:	cb 01       	movw	r24, r22
 7a8:	97 f9       	bld	r25, 7
 7aa:	08 95       	ret

000007ac <__mulsf3>:
 7ac:	0b d0       	rcall	.+22     	; 0x7c4 <__mulsf3x>
 7ae:	c4 cf       	rjmp	.-120    	; 0x738 <__fp_round>
 7b0:	b5 df       	rcall	.-150    	; 0x71c <__fp_pscA>
 7b2:	28 f0       	brcs	.+10     	; 0x7be <__mulsf3+0x12>
 7b4:	ba df       	rcall	.-140    	; 0x72a <__fp_pscB>
 7b6:	18 f0       	brcs	.+6      	; 0x7be <__mulsf3+0x12>
 7b8:	95 23       	and	r25, r21
 7ba:	09 f0       	breq	.+2      	; 0x7be <__mulsf3+0x12>
 7bc:	a6 cf       	rjmp	.-180    	; 0x70a <__fp_inf>
 7be:	ab cf       	rjmp	.-170    	; 0x716 <__fp_nan>
 7c0:	11 24       	eor	r1, r1
 7c2:	ee cf       	rjmp	.-36     	; 0x7a0 <__fp_szero>

000007c4 <__mulsf3x>:
 7c4:	ca df       	rcall	.-108    	; 0x75a <__fp_split3>
 7c6:	a0 f3       	brcs	.-24     	; 0x7b0 <__mulsf3+0x4>

000007c8 <__mulsf3_pse>:
 7c8:	95 9f       	mul	r25, r21
 7ca:	d1 f3       	breq	.-12     	; 0x7c0 <__mulsf3+0x14>
 7cc:	95 0f       	add	r25, r21
 7ce:	50 e0       	ldi	r21, 0x00	; 0
 7d0:	55 1f       	adc	r21, r21
 7d2:	62 9f       	mul	r22, r18
 7d4:	f0 01       	movw	r30, r0
 7d6:	72 9f       	mul	r23, r18
 7d8:	bb 27       	eor	r27, r27
 7da:	f0 0d       	add	r31, r0
 7dc:	b1 1d       	adc	r27, r1
 7de:	63 9f       	mul	r22, r19
 7e0:	aa 27       	eor	r26, r26
 7e2:	f0 0d       	add	r31, r0
 7e4:	b1 1d       	adc	r27, r1
 7e6:	aa 1f       	adc	r26, r26
 7e8:	64 9f       	mul	r22, r20
 7ea:	66 27       	eor	r22, r22
 7ec:	b0 0d       	add	r27, r0
 7ee:	a1 1d       	adc	r26, r1
 7f0:	66 1f       	adc	r22, r22
 7f2:	82 9f       	mul	r24, r18
 7f4:	22 27       	eor	r18, r18
 7f6:	b0 0d       	add	r27, r0
 7f8:	a1 1d       	adc	r26, r1
 7fa:	62 1f       	adc	r22, r18
 7fc:	73 9f       	mul	r23, r19
 7fe:	b0 0d       	add	r27, r0
 800:	a1 1d       	adc	r26, r1
 802:	62 1f       	adc	r22, r18
 804:	83 9f       	mul	r24, r19
 806:	a0 0d       	add	r26, r0
 808:	61 1d       	adc	r22, r1
 80a:	22 1f       	adc	r18, r18
 80c:	74 9f       	mul	r23, r20
 80e:	33 27       	eor	r19, r19
 810:	a0 0d       	add	r26, r0
 812:	61 1d       	adc	r22, r1
 814:	23 1f       	adc	r18, r19
 816:	84 9f       	mul	r24, r20
 818:	60 0d       	add	r22, r0
 81a:	21 1d       	adc	r18, r1
 81c:	82 2f       	mov	r24, r18
 81e:	76 2f       	mov	r23, r22
 820:	6a 2f       	mov	r22, r26
 822:	11 24       	eor	r1, r1
 824:	9f 57       	subi	r25, 0x7F	; 127
 826:	50 40       	sbci	r21, 0x00	; 0
 828:	8a f0       	brmi	.+34     	; 0x84c <__mulsf3_pse+0x84>
 82a:	e1 f0       	breq	.+56     	; 0x864 <__mulsf3_pse+0x9c>
 82c:	88 23       	and	r24, r24
 82e:	4a f0       	brmi	.+18     	; 0x842 <__mulsf3_pse+0x7a>
 830:	ee 0f       	add	r30, r30
 832:	ff 1f       	adc	r31, r31
 834:	bb 1f       	adc	r27, r27
 836:	66 1f       	adc	r22, r22
 838:	77 1f       	adc	r23, r23
 83a:	88 1f       	adc	r24, r24
 83c:	91 50       	subi	r25, 0x01	; 1
 83e:	50 40       	sbci	r21, 0x00	; 0
 840:	a9 f7       	brne	.-22     	; 0x82c <__mulsf3_pse+0x64>
 842:	9e 3f       	cpi	r25, 0xFE	; 254
 844:	51 05       	cpc	r21, r1
 846:	70 f0       	brcs	.+28     	; 0x864 <__mulsf3_pse+0x9c>
 848:	60 cf       	rjmp	.-320    	; 0x70a <__fp_inf>
 84a:	aa cf       	rjmp	.-172    	; 0x7a0 <__fp_szero>
 84c:	5f 3f       	cpi	r21, 0xFF	; 255
 84e:	ec f3       	brlt	.-6      	; 0x84a <__mulsf3_pse+0x82>
 850:	98 3e       	cpi	r25, 0xE8	; 232
 852:	dc f3       	brlt	.-10     	; 0x84a <__mulsf3_pse+0x82>
 854:	86 95       	lsr	r24
 856:	77 95       	ror	r23
 858:	67 95       	ror	r22
 85a:	b7 95       	ror	r27
 85c:	f7 95       	ror	r31
 85e:	e7 95       	ror	r30
 860:	9f 5f       	subi	r25, 0xFF	; 255
 862:	c1 f7       	brne	.-16     	; 0x854 <__mulsf3_pse+0x8c>
 864:	fe 2b       	or	r31, r30
 866:	88 0f       	add	r24, r24
 868:	91 1d       	adc	r25, r1
 86a:	96 95       	lsr	r25
 86c:	87 95       	ror	r24
 86e:	97 f9       	bld	r25, 7
 870:	08 95       	ret

00000872 <__udivmodsi4>:
 872:	a1 e2       	ldi	r26, 0x21	; 33
 874:	1a 2e       	mov	r1, r26
 876:	aa 1b       	sub	r26, r26
 878:	bb 1b       	sub	r27, r27
 87a:	fd 01       	movw	r30, r26
 87c:	0d c0       	rjmp	.+26     	; 0x898 <__udivmodsi4_ep>

0000087e <__udivmodsi4_loop>:
 87e:	aa 1f       	adc	r26, r26
 880:	bb 1f       	adc	r27, r27
 882:	ee 1f       	adc	r30, r30
 884:	ff 1f       	adc	r31, r31
 886:	a2 17       	cp	r26, r18
 888:	b3 07       	cpc	r27, r19
 88a:	e4 07       	cpc	r30, r20
 88c:	f5 07       	cpc	r31, r21
 88e:	20 f0       	brcs	.+8      	; 0x898 <__udivmodsi4_ep>
 890:	a2 1b       	sub	r26, r18
 892:	b3 0b       	sbc	r27, r19
 894:	e4 0b       	sbc	r30, r20
 896:	f5 0b       	sbc	r31, r21

00000898 <__udivmodsi4_ep>:
 898:	66 1f       	adc	r22, r22
 89a:	77 1f       	adc	r23, r23
 89c:	88 1f       	adc	r24, r24
 89e:	99 1f       	adc	r25, r25
 8a0:	1a 94       	dec	r1
 8a2:	69 f7       	brne	.-38     	; 0x87e <__udivmodsi4_loop>
 8a4:	60 95       	com	r22
 8a6:	70 95       	com	r23
 8a8:	80 95       	com	r24
 8aa:	90 95       	com	r25
 8ac:	9b 01       	movw	r18, r22
 8ae:	ac 01       	movw	r20, r24
 8b0:	bd 01       	movw	r22, r26
 8b2:	cf 01       	movw	r24, r30
 8b4:	08 95       	ret

000008b6 <atol>:
 8b6:	1f 93       	push	r17
 8b8:	fc 01       	movw	r30, r24
 8ba:	99 27       	eor	r25, r25
 8bc:	88 27       	eor	r24, r24
 8be:	bc 01       	movw	r22, r24
 8c0:	e8 94       	clt
 8c2:	11 91       	ld	r17, Z+
 8c4:	10 32       	cpi	r17, 0x20	; 32
 8c6:	e9 f3       	breq	.-6      	; 0x8c2 <atol+0xc>
 8c8:	19 30       	cpi	r17, 0x09	; 9
 8ca:	10 f0       	brcs	.+4      	; 0x8d0 <atol+0x1a>
 8cc:	1e 30       	cpi	r17, 0x0E	; 14
 8ce:	c8 f3       	brcs	.-14     	; 0x8c2 <atol+0xc>
 8d0:	1b 32       	cpi	r17, 0x2B	; 43
 8d2:	49 f0       	breq	.+18     	; 0x8e6 <atol+0x30>
 8d4:	1d 32       	cpi	r17, 0x2D	; 45
 8d6:	41 f4       	brne	.+16     	; 0x8e8 <atol+0x32>
 8d8:	68 94       	set
 8da:	05 c0       	rjmp	.+10     	; 0x8e6 <atol+0x30>
 8dc:	1c d0       	rcall	.+56     	; 0x916 <__mulsi_const_10>
 8de:	61 0f       	add	r22, r17
 8e0:	71 1d       	adc	r23, r1
 8e2:	81 1d       	adc	r24, r1
 8e4:	91 1d       	adc	r25, r1
 8e6:	11 91       	ld	r17, Z+
 8e8:	10 53       	subi	r17, 0x30	; 48
 8ea:	1a 30       	cpi	r17, 0x0A	; 10
 8ec:	b8 f3       	brcs	.-18     	; 0x8dc <atol+0x26>
 8ee:	3e f4       	brtc	.+14     	; 0x8fe <atol+0x48>
 8f0:	90 95       	com	r25
 8f2:	80 95       	com	r24
 8f4:	70 95       	com	r23
 8f6:	61 95       	neg	r22
 8f8:	7f 4f       	sbci	r23, 0xFF	; 255
 8fa:	8f 4f       	sbci	r24, 0xFF	; 255
 8fc:	9f 4f       	sbci	r25, 0xFF	; 255
 8fe:	1f 91       	pop	r17
 900:	08 95       	ret

00000902 <__itoa_ncheck>:
 902:	bb 27       	eor	r27, r27
 904:	4a 30       	cpi	r20, 0x0A	; 10
 906:	31 f4       	brne	.+12     	; 0x914 <__itoa_ncheck+0x12>
 908:	99 23       	and	r25, r25
 90a:	22 f4       	brpl	.+8      	; 0x914 <__itoa_ncheck+0x12>
 90c:	bd e2       	ldi	r27, 0x2D	; 45
 90e:	90 95       	com	r25
 910:	81 95       	neg	r24
 912:	9f 4f       	sbci	r25, 0xFF	; 255
 914:	16 c0       	rjmp	.+44     	; 0x942 <__utoa_common>

00000916 <__mulsi_const_10>:
 916:	59 2f       	mov	r21, r25
 918:	48 2f       	mov	r20, r24
 91a:	37 2f       	mov	r19, r23
 91c:	26 2f       	mov	r18, r22
 91e:	66 0f       	add	r22, r22
 920:	77 1f       	adc	r23, r23
 922:	88 1f       	adc	r24, r24
 924:	99 1f       	adc	r25, r25
 926:	66 0f       	add	r22, r22
 928:	77 1f       	adc	r23, r23
 92a:	88 1f       	adc	r24, r24
 92c:	99 1f       	adc	r25, r25
 92e:	62 0f       	add	r22, r18
 930:	73 1f       	adc	r23, r19
 932:	84 1f       	adc	r24, r20
 934:	95 1f       	adc	r25, r21
 936:	66 0f       	add	r22, r22
 938:	77 1f       	adc	r23, r23
 93a:	88 1f       	adc	r24, r24
 93c:	99 1f       	adc	r25, r25
 93e:	08 95       	ret

00000940 <__utoa_ncheck>:
 940:	bb 27       	eor	r27, r27

00000942 <__utoa_common>:
 942:	fb 01       	movw	r30, r22
 944:	55 27       	eor	r21, r21
 946:	aa 27       	eor	r26, r26
 948:	88 0f       	add	r24, r24
 94a:	99 1f       	adc	r25, r25
 94c:	aa 1f       	adc	r26, r26
 94e:	a4 17       	cp	r26, r20
 950:	10 f0       	brcs	.+4      	; 0x956 <__utoa_common+0x14>
 952:	a4 1b       	sub	r26, r20
 954:	83 95       	inc	r24
 956:	50 51       	subi	r21, 0x10	; 16
 958:	b9 f7       	brne	.-18     	; 0x948 <__utoa_common+0x6>
 95a:	a0 5d       	subi	r26, 0xD0	; 208
 95c:	aa 33       	cpi	r26, 0x3A	; 58
 95e:	08 f0       	brcs	.+2      	; 0x962 <__utoa_common+0x20>
 960:	a9 5d       	subi	r26, 0xD9	; 217
 962:	a1 93       	st	Z+, r26
 964:	00 97       	sbiw	r24, 0x00	; 0
 966:	79 f7       	brne	.-34     	; 0x946 <__utoa_common+0x4>
 968:	b1 11       	cpse	r27, r1
 96a:	b1 93       	st	Z+, r27
 96c:	11 92       	st	Z+, r1
 96e:	cb 01       	movw	r24, r22
 970:	00 c0       	rjmp	.+0      	; 0x972 <strrev>

00000972 <strrev>:
 972:	dc 01       	movw	r26, r24
 974:	fc 01       	movw	r30, r24
 976:	67 2f       	mov	r22, r23
 978:	71 91       	ld	r23, Z+
 97a:	77 23       	and	r23, r23
 97c:	e1 f7       	brne	.-8      	; 0x976 <strrev+0x4>
 97e:	32 97       	sbiw	r30, 0x02	; 2
 980:	04 c0       	rjmp	.+8      	; 0x98a <strrev+0x18>
 982:	7c 91       	ld	r23, X
 984:	6d 93       	st	X+, r22
 986:	70 83       	st	Z, r23
 988:	62 91       	ld	r22, -Z
 98a:	ae 17       	cp	r26, r30
 98c:	bf 07       	cpc	r27, r31
 98e:	c8 f3       	brcs	.-14     	; 0x982 <strrev+0x10>
 990:	08 95       	ret

00000992 <_exit>:
 992:	f8 94       	cli

00000994 <__stop_program>:
 994:	ff cf       	rjmp	.-2      	; 0x994 <__stop_program>
